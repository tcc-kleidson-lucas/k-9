<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:HttpUriParser.kt$HttpUriParser$!compressionEnabled &amp;&amp; beginSegmentsCount + endSegmentsCount == 8 || compressionEnabled &amp;&amp; beginSegmentsCount + endSegmentsCount &lt; 8</ID>
    <ID>ComplexCondition:MessageListFragment.kt$MessageListFragment$operation == FolderOperation.MOVE &amp;&amp; !messagingController.isMoveCapable(account) || operation == FolderOperation.COPY &amp;&amp; !messagingController.isCopyCapable(account)</ID>
    <ID>ComplexCondition:MessageListFragment.kt$MessageListFragment$operation == FolderOperation.MOVE &amp;&amp; !messagingController.isMoveCapable(message) || operation == FolderOperation.COPY &amp;&amp; !messagingController.isCopyCapable(message)</ID>
    <ID>ComplexCondition:MimeHeaderParser.kt$MimeHeaderParser$!endReached() &amp;&amp; peek().let { it.isWsp() || it == CR || it == LF }</ID>
    <ID>ComplexCondition:ProvidersXmlDiscovery.kt$ProvidersXmlDiscovery$incomingUriTemplate != null &amp;&amp; incomingUsernameTemplate != null &amp;&amp; outgoingUriTemplate != null &amp;&amp; outgoingUsernameTemplate != null</ID>
    <ID>ComplexCondition:RealOAuth2TokenProvider.kt$RealOAuth2TokenProvider$authException == GeneralErrors.NETWORK_ERROR || authException == GeneralErrors.SERVER_ERROR || authException == AuthorizationRequestErrors.SERVER_ERROR || authException == AuthorizationRequestErrors.TEMPORARILY_UNAVAILABLE</ID>
    <ID>ComplexCondition:SmtpTransport.kt$SmtpTransport$inputStream != null || outputStream != null || socket != null || responseParser != null</ID>
    <ID>ComplexCondition:SmtpTransport.kt$SmtpTransport$username.isNotEmpty() &amp;&amp; (!password.isNullOrEmpty() || AuthType.EXTERNAL == authType || AuthType.XOAUTH2 == authType)</ID>
    <ID>ComplexCondition:StorageMigrationTo19.kt$StorageMigrationTo19$incomingServerSettings["type"] == "imap" &amp;&amp; incomingServerSettings["host"] in setOf("imap.gmail.com", "imap.googlemail.com") &amp;&amp; incomingServerSettings["authenticationType"] != "XOAUTH2" || outgoingServerSettings["host"] in setOf("smtp.gmail.com", "smtp.googlemail.com") &amp;&amp; outgoingServerSettings["authenticationType"] != "XOAUTH2"</ID>
    <ID>ComplexCondition:TextInputLayoutExtensions.kt$text != null &amp;&amp; before &gt; 0 &amp;&amp; (text.isEmpty() || text.length - count == 0)</ID>
    <ID>ComplexCondition:TouchInterceptView.kt$TouchInterceptView$absoluteDeltaY &gt; touchSlop &amp;&amp; absoluteDeltaY &gt; absoluteDeltaX &amp;&amp; (scrollView.canScrollVertically(deltaY.toInt()) || webView.canScrollVertically(deltaY.toInt()))</ID>
    <ID>ComplexCondition:build.gradle.kts$project.hasProperty("k9mail.keyAlias") &amp;&amp; project.hasProperty("k9mail.keyPassword") &amp;&amp; project.hasProperty("k9mail.storeFile") &amp;&amp; project.hasProperty("k9mail.storePassword")</ID>
    <ID>ConstructorParameterNaming:MessageTopView.kt$MessageTopView.SavedState$`in`: Parcel</ID>
    <ID>CyclomaticComplexMethod:AccountSettingsDataStore.kt$AccountSettingsDataStore$override fun getBoolean(key: String, defValue: Boolean): Boolean</ID>
    <ID>CyclomaticComplexMethod:AccountSettingsDataStore.kt$AccountSettingsDataStore$override fun getString(key: String, defValue: String?): String?</ID>
    <ID>CyclomaticComplexMethod:AccountSettingsDataStore.kt$AccountSettingsDataStore$override fun putBoolean(key: String, value: Boolean)</ID>
    <ID>CyclomaticComplexMethod:AccountSettingsDataStore.kt$AccountSettingsDataStore$override fun putString(key: String, value: String?)</ID>
    <ID>CyclomaticComplexMethod:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$private fun acceptKeyDialog(msgResId: Int, exception: CertificateValidationException)</ID>
    <ID>CyclomaticComplexMethod:FlowedMessageUtils.kt$FlowedMessageUtils$@JvmStatic fun deflow(text: String, delSp: Boolean): String</ID>
    <ID>CyclomaticComplexMethod:GeneralSettingsDataStore.kt$GeneralSettingsDataStore$override fun getBoolean(key: String, defValue: Boolean): Boolean</ID>
    <ID>CyclomaticComplexMethod:GeneralSettingsDataStore.kt$GeneralSettingsDataStore$override fun getString(key: String, defValue: String?): String?</ID>
    <ID>CyclomaticComplexMethod:GeneralSettingsDataStore.kt$GeneralSettingsDataStore$override fun getStringSet(key: String, defValues: Set&lt;String&gt;?): Set&lt;String&gt;?</ID>
    <ID>CyclomaticComplexMethod:GeneralSettingsDataStore.kt$GeneralSettingsDataStore$override fun putBoolean(key: String, value: Boolean)</ID>
    <ID>CyclomaticComplexMethod:GeneralSettingsDataStore.kt$GeneralSettingsDataStore$override fun putString(key: String, value: String?)</ID>
    <ID>CyclomaticComplexMethod:HttpUriParser.kt$HttpUriParser$private fun tryMatchIpv6Address(text: CharSequence, startPos: Int): Int</ID>
    <ID>CyclomaticComplexMethod:ImapSync.kt$ImapSync$private fun synchronizeMailboxSynchronous(folder: String, syncConfig: SyncConfig, listener: SyncListener)</ID>
    <ID>CyclomaticComplexMethod:K9NotificationStrategy.kt$K9NotificationStrategy$override fun shouldNotifyForMessage( account: Account, localFolder: LocalFolder, message: LocalMessage, isOldMessage: Boolean, ): Boolean</ID>
    <ID>CyclomaticComplexMethod:MessageList.kt$MessageList$private fun decodeExtrasToLaunchData(intent: Intent): LaunchData</ID>
    <ID>CyclomaticComplexMethod:MessageList.kt$MessageList$private fun onCustomKeyDown(event: KeyEvent): Boolean</ID>
    <ID>CyclomaticComplexMethod:MessageListAdapter.kt$MessageListAdapter$private fun bindMessageViewHolder(holder: MessageViewHolder, messageListItem: MessageListItem)</ID>
    <ID>CyclomaticComplexMethod:MessageListFragment.kt$MessageListFragment$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>CyclomaticComplexMethod:MessagePartDatabaseHelpers.kt$MessagePartEntry$override fun equals(other: Any?): Boolean</ID>
    <ID>CyclomaticComplexMethod:MessagePartDatabaseHelpers.kt$MessagePartEntry$override fun hashCode(): Int</ID>
    <ID>CyclomaticComplexMethod:MessageViewFragment.kt$MessageViewFragment$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>CyclomaticComplexMethod:Migrations.kt$Migrations$@JvmStatic fun upgradeDatabase(db: SQLiteDatabase, migrationsHelper: MigrationsHelper)</ID>
    <ID>CyclomaticComplexMethod:MimeParameterDecoder.kt$MimeParameterDecoder$private fun convertToParameterSection(parameterName: String, parameterValue: ParameterValue): ParameterSection?</ID>
    <ID>CyclomaticComplexMethod:PushController.kt$PushController$private fun updatePushers()</ID>
    <ID>CyclomaticComplexMethod:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) override fun appendMessages(messages: List&lt;Message&gt;): Map&lt;String, String&gt;?</ID>
    <ID>CyclomaticComplexMethod:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) override fun fetch( messages: List&lt;ImapMessage&gt;, fetchProfile: FetchProfile, listener: FetchListener?, maxDownloadSize: Int, )</ID>
    <ID>CyclomaticComplexMethod:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) private fun handleFetchResponse(message: ImapMessage, fetchList: ImapList): Any?</ID>
    <ID>CyclomaticComplexMethod:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) private fun parseBodyStructure(bs: ImapList, part: Part, id: String)</ID>
    <ID>CyclomaticComplexMethod:RealImapStore.kt$RealImapStore$@Throws(IOException::class, MessagingException::class) private fun listFolders(connection: ImapConnection, subscribedOnly: Boolean): List&lt;FolderListItem&gt;</ID>
    <ID>CyclomaticComplexMethod:SettingsExporter.kt$SettingsExporter$private fun writeAccount(serializer: XmlSerializer, account: Account, prefs: Map&lt;String, Any&gt;)</ID>
    <ID>CyclomaticComplexMethod:SettingsImportFragment.kt$SettingsImportFragment$private fun ViewHolder.updateUi(model: SettingsImportUiModel)</ID>
    <ID>CyclomaticComplexMethod:SmtpTransport.kt$SmtpTransport$@VisibleForTesting @Throws(MessagingException::class) internal fun open()</ID>
    <ID>CyclomaticComplexMethod:SortTypeToastProvider.kt$SortTypeToastProvider$fun getToast(sortType: SortType, ascending: Boolean): Int</ID>
    <ID>CyclomaticComplexMethod:StorageMigrations.kt$StorageMigrations$@JvmStatic fun upgradeDatabase(db: SQLiteDatabase, migrationsHelper: StorageMigrationsHelper)</ID>
    <ID>CyclomaticComplexMethod:TouchInterceptView.kt$TouchInterceptView$private fun handleOnInterceptTouchEvent(event: MotionEvent)</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:RetrieveFolderOperationsTest.kt$RetrieveFolderOperationsTest$val (folderId1, folderId2, folderId3, folderId4) = listOf( sqliteDatabase.createFolder(name = "Folder 1", displayClass = "FIRST_CLASS"), sqliteDatabase.createFolder(name = "Folder 2", displayClass = "SECOND_CLASS"), sqliteDatabase.createFolder(name = "Folder 3", displayClass = "FIRST_CLASS"), sqliteDatabase.createFolder(name = "Folder 4", displayClass = "NO_CLASS"), )</ID>
    <ID>EmptyCatchBlock:CommandRefreshFolderListTest.kt$CommandRefreshFolderListTest${ }</ID>
    <ID>EmptyCatchBlock:K9BackendFolderTest.kt$K9BackendFolderTest${ }</ID>
    <ID>ForbiddenComment:AccountPreferenceSerializer.kt$AccountPreferenceSerializer$// TODO: Remove preference settings that may exist for individual folders in the account.</ID>
    <ID>ForbiddenComment:AccountSearchConditions.kt$// TODO: Create a proper interface for creating arbitrary condition trees</ID>
    <ID>ForbiddenComment:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$// TODO: commitAllowingStateLoss() is used to prevent https://code.google.com/p/android/issues/detail?id=23761</ID>
    <ID>ForbiddenComment:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$// TODO: localize this string</ID>
    <ID>ForbiddenComment:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$// TODO: localize this strings</ID>
    <ID>ForbiddenComment:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$// TODO: refactor with DialogFragment.</ID>
    <ID>ForbiddenComment:AccountSetupCheckSettings.kt$AccountSetupCheckSettings.CheckAccountTask$* FIXME: Don't use an AsyncTask to perform network operations. * See also discussion in https://github.com/thundernest/k-9/pull/560</ID>
    <ID>ForbiddenComment:Backend.kt$Backend$// TODO: Add a way to cancel the sync process</ID>
    <ID>ForbiddenComment:BackendFolder.kt$BackendFolder$// FIXME: add documentation</ID>
    <ID>ForbiddenComment:BackgroundAccountRemover.kt$BackgroundAccountRemover$// TODO: Add a mechanism to hide the account from the UI right away</ID>
    <ID>ForbiddenComment:CommandRefreshFolderList.kt$CommandRefreshFolderList$// TODO: Start using the proper server ID.</ID>
    <ID>ForbiddenComment:CommandSync.kt$CommandSync$// FIXME: Add sort parameter</ID>
    <ID>ForbiddenComment:Contacts.kt$Contacts$// TODO: Keep track of this information in a local database. Then use this information when sorting contacts for</ID>
    <ID>ForbiddenComment:GeneralSettings.kt$GeneralSettings$// TODO: Move over settings from K9</ID>
    <ID>ForbiddenComment:GeneralSettingsManager.kt$GeneralSettingsManager$* Retrieve and modify general settings. * * TODO: Add more settings as needed.</ID>
    <ID>ForbiddenComment:ImapBackendPusher.kt$ImapBackendPusher$// TODO: This could be happening because of too many connections to the host. Ideally we'd want to</ID>
    <ID>ForbiddenComment:ImapSync.kt$ImapSync$// TODO: Only fetch small and large messages if we have some</ID>
    <ID>ForbiddenComment:ImapSync.kt$ImapSync.&lt;no name provided&gt;$// TODO: This might be the source of poll count errors in the UI. Is todo always the same as ofTotal</ID>
    <ID>ForbiddenComment:K9BackendFolderTest.kt$K9BackendFolderTest$// FIXME: This is a hack to get Preferences into a state where it's safe to call newAccount()</ID>
    <ID>ForbiddenComment:K9BackendStorageTest.kt$K9BackendStorageTest$// FIXME: This is a hack to get Preferences into a state where it's safe to call newAccount()</ID>
    <ID>ForbiddenComment:K9ThemeProvider.kt$K9ThemeProvider$// TODO: Move this class and the theme resources to the main app module</ID>
    <ID>ForbiddenComment:MessageDetailsFragment.kt$MessageDetailsFragment$// FIXME: Replace this with a mechanism that survives process death</ID>
    <ID>ForbiddenComment:MessageDetailsFragment.kt$MessageDetailsFragment$// TODO: Use the identity this message was sent to as sender identity</ID>
    <ID>ForbiddenComment:MessageHelper.kt$MessageHelper.Companion$* If the number of addresses exceeds this value the addresses aren't * resolved to the names of Android contacts. * * TODO: This number was chosen arbitrarily and should be determined by performance tests. * * @see .toFriendly</ID>
    <ID>ForbiddenComment:MessageListFragment.kt$MessageListFragment$// FIXME: Don't save the changes in the UI thread</ID>
    <ID>ForbiddenComment:MessageListFragment.kt$MessageListFragment$// TODO: empty thread view -&gt; return to full message list</ID>
    <ID>ForbiddenComment:MessageListFragment.kt$MessageListFragment.ActionModeCallback$// TODO: Only finish action mode if all messages have been moved.</ID>
    <ID>ForbiddenComment:MessageListLoader.kt$MessageListLoader$// TODO: Return an error object instead of an empty list</ID>
    <ID>ForbiddenComment:MessageListRemoteViewFactory.kt$MessageListRemoteViewFactory$// TODO: Use same sort order that is used for the Unified Inbox inside the app</ID>
    <ID>ForbiddenComment:MessageWebView.kt$MessageWebView$// TODO: Review alternatives. NARROW_COLUMNS is deprecated on KITKAT</ID>
    <ID>ForbiddenComment:MimeHeaderEncoder.kt$MimeHeaderEncoder$// TODO: Fold long text that provides enough opportunities for folding and doesn't contain any characters that</ID>
    <ID>ForbiddenComment:MimeTypeTest.kt$MimeTypeTest$// TODO: Try to parse all IANA-registered media types</ID>
    <ID>ForbiddenComment:NotificationOperations.kt$NotificationOperations$// TODO: Remove notifications when updating the message list. That way we can easily remove only</ID>
    <ID>ForbiddenComment:RealImapConnection.kt$RealImapConnection$// TODO: Check response code so we don't needlessly invalidate the token.</ID>
    <ID>ForbiddenComment:RealImapConnectionTest.kt$RealImapConnectionTest$// FIXME: CertificateValidationException seems wrong</ID>
    <ID>ForbiddenComment:RealImapConnectionTest.kt$RealImapConnectionTest$// FIXME: improve exception message</ID>
    <ID>ForbiddenComment:RealImapFolder.kt$RealImapFolder$// TODO: Just perform the operation and only check for existence of the folder if the operation fails.</ID>
    <ID>ForbiddenComment:SaveMessageOperations.kt$MessagePartType$// TODO: currently unused, might be used for caching at a later point</ID>
    <ID>ForbiddenComment:SettingsExportFragment.kt$SettingsExportFragment$// TODO: Update list instead of replacing it completely</ID>
    <ID>ForbiddenComment:SettingsImportFragment.kt$SettingsImportFragment$// TODO: Update list instead of replacing it completely</ID>
    <ID>ForbiddenComment:ShareIntentBuilder.kt$ShareIntentBuilder$// TODO: Pass MessageViewInfo and extract text from there</ID>
    <ID>ForbiddenComment:ShareIntentBuilder.kt$ShareIntentBuilder$// TODO: Use display HTML for EXTRA_HTML_TEXT and convert it to plain text for EXTRA_TEXT</ID>
    <ID>ForbiddenComment:SmtpTransport.kt$SmtpTransport$// TODO: Fix tests to not use open() directly</ID>
    <ID>ForbiddenComment:SmtpTransportTest.kt$SmtpTransportTest$// FIXME: Make sure connection was closed</ID>
    <ID>ForbiddenComment:SpecialFolderUpdater.kt$SpecialFolderUpdater$// TODO: Find a better way to deal with local-only special folders</ID>
    <ID>ForbiddenComment:SpecialLocalFoldersCreator.kt$SpecialLocalFoldersCreator$// TODO: When rewriting the account setup code make sure this method is only called once. Until then this can be</ID>
    <ID>ForbiddenComment:SyncNotificationController.kt$SyncNotificationController$// TODO: Use format string from resources</ID>
    <ID>ForbiddenComment:ThreadMessageOperations.kt$ThreadMessageOperations$// TODO: Use MessageIdParser</ID>
    <ID>FunctionOnlyReturningConstant:DisplayHtml.kt$DisplayHtml$private fun cssStyleSignature(): String</ID>
    <ID>FunctionOnlyReturningConstant:ExtraAccountDiscovery.kt$ExtraAccountDiscovery$@JvmStatic fun discover(email: String): ConnectionSettings?</ID>
    <ID>ImplicitDefaultLocale:MessageListAdapter.kt$MessageListAdapter$String.format("%d", threadCount)</ID>
    <ID>ImplicitDefaultLocale:MessageListItemMapper.kt$MessageListItemMapper$String.format("%d %s", dayOfMonth, month)</ID>
    <ID>ImplicitDefaultLocale:RealImapFolder.kt$RealImapFolder$String.format( "%s 1:* %sFLAGS.SILENT (%s)", Commands.UID_STORE, if (value) "+" else "-", combinedFlags, )</ID>
    <ID>ImplicitDefaultLocale:RealImapFolder.kt$RealImapFolder$String.format("%s %s", openCommand, escapedFolderName)</ID>
    <ID>ImplicitDefaultLocale:RealImapFolder.kt$RealImapFolder$String.format("%sFLAGS.SILENT (%s)", if (value) "+" else "-", combinedFlags)</ID>
    <ID>ImplicitDefaultLocale:RealImapFolder.kt$RealImapFolder$String.format(";\r\n %s=%s", paramName, encodedValue)</ID>
    <ID>ImplicitDefaultLocale:RealImapFolder.kt$RealImapFolder$String.format("BODY.PEEK[%s]", partId)</ID>
    <ID>ImplicitDefaultLocale:RealImapFolder.kt$RealImapFolder$String.format("CREATE %s", escapedFolderName)</ID>
    <ID>ImplicitDefaultLocale:RealImapFolder.kt$RealImapFolder$String.format("STATUS %s (RECENT)", escapedFolderName)</ID>
    <ID>ImplicitDefaultLocale:RealImapFolder.kt$RealImapFolder$String.format("STATUS %s (UIDVALIDITY)", escapedFolderName)</ID>
    <ID>ImplicitDefaultLocale:RealImapFolder.kt$RealImapFolder$String.format("UID FETCH %s (%s)", commaSeparatedUids, spaceSeparatedFetchFields)</ID>
    <ID>ImplicitDefaultLocale:RealImapFolder.kt$RealImapFolder$String.format("UID FETCH %s (UID %s)", message.uid, fetch)</ID>
    <ID>ImplicitDefaultLocale:RealImapFolder.kt$RealImapFolder$String.format("UID SEARCH HEADER MESSAGE-ID %s", ImapUtility.encodeString(messageId))</ID>
    <ID>ImplicitDefaultLocale:SettingsExporter.kt$SettingsExporter$String.format("%s_%s.%s", EXPORT_FILENAME_PREFIX, dateFormat.format(now.time), EXPORT_FILENAME_SUFFIX)</ID>
    <ID>ImplicitDefaultLocale:SmtpTransport.kt$SmtpTransport$String.format("MAIL FROM:&lt;%s&gt; BODY=8BITMIME", fromAddress)</ID>
    <ID>ImplicitDefaultLocale:SmtpTransport.kt$SmtpTransport$String.format("MAIL FROM:&lt;%s&gt;", fromAddress)</ID>
    <ID>ImplicitDefaultLocale:SmtpTransport.kt$SmtpTransport$String.format("RCPT TO:&lt;%s&gt;", address)</ID>
    <ID>InvalidPackageDeclaration:Main.kt$package app.k9mail.cli.html.cleaner</ID>
    <ID>LargeClass:MessageList.kt$MessageList : K9ActivityMessageListFragmentListenerMessageViewFragmentListenerMessageViewContainerListenerOnBackStackChangedListenerOnSwitchCompleteListenerPermissionUiHelper</ID>
    <ID>LargeClass:MessageListFragment.kt$MessageListFragment : FragmentConfirmationDialogFragmentListenerMessageListItemActionListener</ID>
    <ID>LargeClass:RealImapConnection.kt$RealImapConnection : ImapConnection</ID>
    <ID>LargeClass:RealImapConnectionTest.kt$RealImapConnectionTest</ID>
    <ID>LargeClass:RealImapFolder.kt$RealImapFolder : ImapFolder</ID>
    <ID>LargeClass:RealImapFolderTest.kt$RealImapFolderTest</ID>
    <ID>LargeClass:SmtpTransportTest.kt$SmtpTransportTest</ID>
    <ID>LongMethod:AccountPreferenceSerializer.kt$AccountPreferenceSerializer$@Synchronized fun delete(editor: StorageEditor, storage: Storage, account: Account)</ID>
    <ID>LongMethod:AccountPreferenceSerializer.kt$AccountPreferenceSerializer$@Synchronized fun loadAccount(account: Account, storage: Storage)</ID>
    <ID>LongMethod:AccountPreferenceSerializer.kt$AccountPreferenceSerializer$@Synchronized fun save(editor: StorageEditor, storage: Storage, account: Account)</ID>
    <ID>LongMethod:AccountPreferenceSerializer.kt$AccountPreferenceSerializer$fun loadDefaults(account: Account)</ID>
    <ID>LongMethod:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$private fun acceptKeyDialog(msgResId: Int, exception: CertificateValidationException)</ID>
    <ID>LongMethod:CopyMessageOperations.kt$CopyMessageOperations$private fun readMessageToContentValues(database: SQLiteDatabase, messageId: Long): ContentValues</ID>
    <ID>LongMethod:CopyMessageOperationsTest.kt$CopyMessageOperationsTest$@Test fun `copy message into an existing thread`()</ID>
    <ID>LongMethod:CopyMessageOperationsTest.kt$CopyMessageOperationsTest$@Test fun `copy message that is part of a thread`()</ID>
    <ID>LongMethod:ImapSync.kt$ImapSync$private fun downloadMessages( syncConfig: SyncConfig, remoteFolder: ImapFolder, backendFolder: BackendFolder, inputMessages: List&lt;ImapMessage&gt;, highestKnownUid: Long?, listener: SyncListener, )</ID>
    <ID>LongMethod:ImapSync.kt$ImapSync$private fun synchronizeMailboxSynchronous(folder: String, syncConfig: SyncConfig, listener: SyncListener)</ID>
    <ID>LongMethod:K9NotificationStrategy.kt$K9NotificationStrategy$override fun shouldNotifyForMessage( account: Account, localFolder: LocalFolder, message: LocalMessage, isOldMessage: Boolean, ): Boolean</ID>
    <ID>LongMethod:MessageContainerView.kt$MessageContainerView$private fun createImageMenu(menu: ContextMenu, imageUrl: String?)</ID>
    <ID>LongMethod:MessageList.kt$MessageList$private fun decodeExtrasToLaunchData(intent: Intent): LaunchData</ID>
    <ID>LongMethod:MessageList.kt$MessageList$private fun onCustomKeyDown(event: KeyEvent): Boolean</ID>
    <ID>LongMethod:MessageList.kt$MessageList$public override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:MessageListAdapter.kt$MessageListAdapter$private fun bindMessageViewHolder(holder: MessageViewHolder, messageListItem: MessageListItem)</ID>
    <ID>LongMethod:MessageListRepositoryTest.kt$MessageListRepositoryTest$@Test fun `getThread() should use flag values from the cache`()</ID>
    <ID>LongMethod:MessageTest.kt$MessageTest$@Test fun toBodyPart()</ID>
    <ID>LongMethod:MessageTest.kt$MessageTest$@Test fun writeTo_withNestedMessage()</ID>
    <ID>LongMethod:MessageViewFragment.kt$MessageViewFragment$override fun onPrepareOptionsMenu(menu: Menu)</ID>
    <ID>LongMethod:MoveMessageOperationsTest.kt$MoveMessageOperationsTest$@Test fun `move message when destination has empty message entry`()</ID>
    <ID>LongMethod:NotificationDataStore.kt$NotificationDataStore$@Synchronized fun removeNotifications( account: Account, selector: (List&lt;MessageReference&gt;) -&gt; List&lt;MessageReference&gt;, ): RemoveNotificationsResult?</ID>
    <ID>LongMethod:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) override fun appendMessages(messages: List&lt;Message&gt;): Map&lt;String, String&gt;?</ID>
    <ID>LongMethod:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) override fun fetch( messages: List&lt;ImapMessage&gt;, fetchProfile: FetchProfile, listener: FetchListener?, maxDownloadSize: Int, )</ID>
    <ID>LongMethod:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) private fun handleFetchResponse(message: ImapMessage, fetchList: ImapList): Any?</ID>
    <ID>LongMethod:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) private fun parseBodyStructure(bs: ImapList, part: Part, id: String)</ID>
    <ID>LongMethod:RealImapFolderIdler.kt$RealImapFolderIdler$private fun ImapFolder.idle(): IdleResult</ID>
    <ID>LongMethod:RecipientNamesView.kt$RecipientNamesView$override fun onLayout(changed: Boolean, left: Int, top: Int, right: Int, bottom: Int)</ID>
    <ID>LongMethod:RetrieveMessageListOperations.kt$RetrieveMessageListOperations$fun &lt;T&gt; getThreadedMessages( selection: String, selectionArgs: Array&lt;String&gt;, sortOrder: String, mapper: MessageMapper&lt;out T?&gt;, ): List&lt;T&gt;</ID>
    <ID>LongMethod:SaveMessageOperationsTest.kt$SaveMessageOperationsTest$@Test fun `save local message`()</ID>
    <ID>LongMethod:SaveMessageOperationsTest.kt$SaveMessageOperationsTest$@Test fun `save message with multipart body`()</ID>
    <ID>LongMethod:SaveMessageOperationsTest.kt$SaveMessageOperationsTest$@Test fun `save message with text_plain body`()</ID>
    <ID>LongMethod:SettingsExporter.kt$SettingsExporter$private fun writeAccount(serializer: XmlSerializer, account: Account, prefs: Map&lt;String, Any&gt;)</ID>
    <ID>LongMethod:SmtpResponseParser.kt$SmtpResponseParser$fun readHelloResponse(): SmtpHelloResponse</ID>
    <ID>LongMethod:SmtpTransport.kt$SmtpTransport$@Throws(MessagingException::class) fun sendMessage(message: Message)</ID>
    <ID>LongMethod:SmtpTransport.kt$SmtpTransport$@VisibleForTesting @Throws(MessagingException::class) internal fun open()</ID>
    <ID>LongMethod:SrvServiceDiscoveryTest.kt$SrvServiceDiscoveryTest$@Test fun discover_withRequiredServices_shouldCorrectlyPrioritize()</ID>
    <ID>LongMethod:TextBodyBuilderTest.kt$TextBodyBuilderTest.Companion$@JvmStatic @Parameterized.Parameters(name = "{index}: {0}") fun data(): Collection&lt;TestData&gt;</ID>
    <ID>LongMethod:ThreadMessageOperationsTest.kt$ThreadMessageOperationsTest$@Test fun `merge two existing threads`()</ID>
    <ID>LongParameterList:CopyMessageOperations.kt$DatabaseMessagePart$( val id: Long, val type: Int, val root: Long, val parent: Long, val seq: Int, val mimeType: String?, val decodedBodySize: Long?, val displayName: String?, val header: ByteArray?, val encoding: String?, val charset: String?, val dataLocation: Int, val data: ByteArray?, val preamble: ByteArray?, val epilogue: ByteArray?, val boundary: String?, val contentId: String?, val serverExtra: String?, )</ID>
    <ID>LongParameterList:FolderHelpers.kt$( name: String = "irrelevant", type: String = "regular", serverId: String? = null, isLocalOnly: Boolean = true, integrate: Boolean = false, inTopGroup: Boolean = false, displayClass: String = "NO_CLASS", syncClass: String? = "INHERITED", notifyClass: String? = "INHERITED", pushClass: String? = "SECOND_CLASS", lastUpdated: Long = 0L, unreadCount: Int = 0, visibleLimit: Int = 25, status: String? = null, flaggedCount: Int = 0, moreMessages: String = "unknown", )</ID>
    <ID>LongParameterList:ImapSync.kt$ImapSync$( remoteFolder: ImapFolder, backendFolder: BackendFolder, largeMessages: List&lt;ImapMessage&gt;, progress: AtomicInteger, downloadedMessageCount: AtomicInteger, todo: Int, highestKnownUid: Long?, listener: SyncListener, maxDownloadSize: Int, )</ID>
    <ID>LongParameterList:ImapSync.kt$ImapSync$( remoteFolder: ImapFolder, backendFolder: BackendFolder, smallMessages: List&lt;ImapMessage&gt;, progress: AtomicInteger, downloadedMessageCount: AtomicInteger, todo: Int, highestKnownUid: Long?, listener: SyncListener, )</ID>
    <ID>LongParameterList:ImapSync.kt$ImapSync$( syncConfig: SyncConfig, remoteFolder: ImapFolder, unsyncedMessages: List&lt;ImapMessage&gt;, smallMessages: MutableList&lt;ImapMessage&gt;, largeMessages: MutableList&lt;ImapMessage&gt;, progress: AtomicInteger, todo: Int, listener: SyncListener, )</ID>
    <ID>LongParameterList:MessageDatabaseHelpers.kt$( folderId: Long, deleted: Boolean = false, uid: String? = null, subject: String = "", date: Long = 0L, flags: String = "", senderList: String = "", toList: String = "", ccList: String = "", bccList: String = "", replyToList: String = "", attachmentCount: Int = 0, internalDate: Long = 0L, messageIdHeader: String? = null, previewType: DatabasePreviewType = DatabasePreviewType.NONE, preview: String = "", mimeType: String = "text/plain", normalizedSubjectHash: Long = 0L, empty: Boolean = false, read: Boolean = false, flagged: Boolean = false, answered: Boolean = false, forwarded: Boolean = false, messagePartId: Long = 0L, encryptionType: String? = null, newMessage: Boolean = false, )</ID>
    <ID>LongParameterList:MessageDatabaseHelpers.kt$( type: Int = 0, root: Int? = null, parent: Int = -1, seq: Int = 0, mimeType: String = "text/plain", decodedBodySize: Int = 0, displayName: String? = null, header: String? = null, encoding: String = "7bit", charset: String? = null, dataLocation: Int = 0, data: ByteArray? = null, preamble: String? = null, epilogue: String? = null, boundary: String? = null, contentId: String? = null, serverExtra: String? = null, directory: File? = null, )</ID>
    <ID>LongParameterList:MessageDetailsViewModel.kt$MessageDetailsViewModel$( private val resources: Resources, private val messageRepository: MessageRepository, private val folderRepository: FolderRepository, private val contactSettingsProvider: ContactSettingsProvider, private val contactRepository: ContactRepository, private val contactPermissionResolver: ContactPermissionResolver, private val clipboardManager: ClipboardManager, private val accountManager: AccountManager, private val participantFormatter: MessageDetailsParticipantFormatter, private val folderNameFormatter: FolderNameFormatter, )</ID>
    <ID>LongParameterList:MessageListAdapterTest.kt$MessageListAdapterTest$( account: Account = Account(SOME_ACCOUNT_UUID), subject: String? = "irrelevant", threadCount: Int = 0, messageDate: Long = 0L, internalDate: Long = 0L, displayName: CharSequence = "irrelevant", displayAddress: Address? = Address.parse("irrelevant@domain.example").first(), previewText: String = "irrelevant", isMessageEncrypted: Boolean = false, isRead: Boolean = false, isStarred: Boolean = false, isAnswered: Boolean = false, isForwarded: Boolean = false, hasAttachments: Boolean = false, uniqueId: Long = 0L, folderId: Long = 0L, messageUid: String = "irrelevant", databaseId: Long = 0L, threadRoot: Long = 0L, )</ID>
    <ID>LongParameterList:MessageListAdapterTest.kt$MessageListAdapterTest$( fontSizes: FontSizes = createFontSizes(), previewLines: Int = 0, stars: Boolean = true, senderAboveSubject: Boolean = false, showContactPicture: Boolean = true, showingThreadedList: Boolean = true, backGroundAsReadIndicator: Boolean = false, showAccountChip: Boolean = false, density: UiDensity = UiDensity.Default, )</ID>
    <ID>LongParameterList:MessagePartDatabaseHelpers.kt$( type: Int = MessagePartType.UNKNOWN, root: Long? = null, parent: Long = -1, seq: Int = 0, mimeType: String? = null, decodedBodySize: Int? = null, displayName: String? = null, header: String? = null, encoding: String? = null, charset: String? = null, dataLocation: Int = DataLocation.MISSING, data: ByteArray? = null, preamble: String? = null, epilogue: String? = null, boundary: String? = null, contentId: String? = null, serverExtra: String? = null, )</ID>
    <ID>LongParameterList:PasswordPromptDialogFragment.kt$PasswordPromptDialogFragment.Companion$( accountUuid: String, accountName: String, inputIncomingServerPassword: Boolean, incomingServerName: String?, inputOutgoingServerPassword: Boolean, outgoingServerName: String?, targetFragment: Fragment, requestCode: Int, )</ID>
    <ID>LongParameterList:PushController.kt$PushController$( private val preferences: Preferences, private val generalSettingsManager: GeneralSettingsManager, private val backendManager: BackendManager, private val pushServiceManager: PushServiceManager, private val bootCompleteManager: BootCompleteManager, private val autoSyncManager: AutoSyncManager, private val pushNotificationManager: PushNotificationManager, private val connectivityManager: ConnectivityManager, private val accountPushControllerFactory: AccountPushControllerFactory, private val coroutineScope: CoroutineScope = GlobalScope, private val coroutineDispatcher: CoroutineDispatcher = Executors.newSingleThreadExecutor().asCoroutineDispatcher(), )</ID>
    <ID>LongParameterList:RecipientPresenter.kt$RecipientPresenter$( private val context: Context, loaderManager: LoaderManager, private val openPgpApiManager: OpenPgpApiManager, private val recipientMvpView: RecipientMvpView, account: Account, private val composePgpInlineDecider: ComposePgpInlineDecider, private val composePgpEnableByDefaultDecider: ComposePgpEnableByDefaultDecider, private val autocryptStatusInteractor: AutocryptStatusInteractor, private val replyToParser: ReplyToParser, private val draftStateHeaderParser: AutocryptDraftStateHeaderParser, )</ID>
    <ID>LongParameterList:SaveMessageOperationsTest.kt$SaveMessageOperationsTest$( subject: String? = getSubject(), date: Long = sentDate?.time ?: System.currentTimeMillis(), internalDate: Long = date, downloadState: MessageDownloadState = getDownloadState(), attachmentCount: Int = 0, previewResult: PreviewResult = PreviewResult.none(), textForSearchIndex: String? = null, encryptionType: String? = null, )</ID>
    <ID>LongParameterList:SettingsImportViewModel.kt$SavedAccountState$( val accountIndex: Int, val displayName: String, val accountUuid: String, val selected: Boolean, val importStatus: ImportStatus, val incomingServerName: String?, val outgoingServerName: String?, val incomingServerPasswordNeeded: Boolean, val outgoingServerPasswordNeeded: Boolean, )</ID>
    <ID>LoopWithTooManyJumpStatements:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$for (subjectAlternativeName in subjectAlternativeNames) { val type = subjectAlternativeName[0] as Int val value: Any? = subjectAlternativeName[1] val name: String = when (type) { 0 -&gt; { Timber.w("SubjectAltName of type OtherName not supported.") continue } 1 -&gt; value as String 2 -&gt; value as String 3 -&gt; { Timber.w("unsupported SubjectAltName of type x400Address") continue } 4 -&gt; { Timber.w("unsupported SubjectAltName of type directoryName") continue } 5 -&gt; { Timber.w("unsupported SubjectAltName of type ediPartyName") continue } 6 -&gt; value as String 7 -&gt; value as String else -&gt; { Timber.w("unsupported SubjectAltName of unknown type") continue } } // if some of the SubjectAltNames match the store or transport -host, display them if (name.equals(incomingServerHost, ignoreCase = true) || name.equals(outgoingServerHost, ignoreCase = true) ) { // TODO: localize this string altNamesText.append("Subject(alt): ").append(name).append(",...\n") } else if (name.startsWith("*.") &amp;&amp; ( incomingServerHost.endsWith(name.substring(2)) || outgoingServerHost.endsWith(name.substring(2)) ) ) { // TODO: localize this string altNamesText.append("Subject(alt): ").append(name).append(",...\n") } }</ID>
    <ID>LoopWithTooManyJumpStatements:HttpUriParser.kt$HttpUriParser$while (currentPos &lt; text.length) { val c = text[currentPos] if (isHexDigit(c)) { shouldBeHex = (shouldBeHex - 1).coerceAtLeast(0) } else if (shouldBeHex == 0) { if (c in allowedCharacters) { // Everything ok here :) } else if (c == '%') { shouldBeHex = 2 } else { break } } else { break } currentPos++ }</ID>
    <ID>LoopWithTooManyJumpStatements:RealImapStore.kt$RealImapStore$for (listResponse in listResponses) { val serverId = listResponse.name if (pathDelimiter == null) { pathDelimiter = listResponse.hierarchyDelimiter combinedPrefix = null } if (RealImapFolder.INBOX.equals(serverId, ignoreCase = true)) { continue } else if (listResponse.hasAttribute("\\NoSelect")) { continue } val name = getFolderDisplayName(serverId) val oldServerId = getOldServerId(serverId) val type = when { listResponse.hasAttribute("\\Archive") -&gt; FolderType.ARCHIVE listResponse.hasAttribute("\\All") -&gt; FolderType.ARCHIVE listResponse.hasAttribute("\\Drafts") -&gt; FolderType.DRAFTS listResponse.hasAttribute("\\Sent") -&gt; FolderType.SENT listResponse.hasAttribute("\\Junk") -&gt; FolderType.SPAM listResponse.hasAttribute("\\Trash") -&gt; FolderType.TRASH else -&gt; FolderType.REGULAR } val existingItem = folderMap[serverId] if (existingItem == null || existingItem.type == FolderType.REGULAR) { folderMap[serverId] = FolderListItem(serverId, name, type, oldServerId) } }</ID>
    <ID>LoopWithTooManyJumpStatements:SettingsExporter.kt$SettingsExporter$for ((key, value) in prefs) { val valueString = value.toString() val comps = key.split(".") if (comps.size &lt; 3) { // Skip non-identity config entries continue } val keyUuid = comps[0] val identityKey = comps[1] val identityIndex = comps[2] if (keyUuid != accountUuid || identityIndex != identity) { // Skip entries that belong to another identity continue } val versionedSetting = IdentitySettingsDescriptions.SETTINGS[identityKey] if (versionedSetting != null) { val highestVersion = versionedSetting.lastKey() val setting = versionedSetting[highestVersion] if (setting != null) { // Only write settings that have an entry in IdentitySettings.SETTINGS try { writeKeyAndPrettyValueFromSetting(serializer, identityKey, setting, valueString) } catch (e: InvalidSettingValueException) { Timber.w( "Identity setting \"%s\" has invalid value \"%s\" in preference storage. " + "This shouldn't happen!", identityKey, valueString, ) } } } }</ID>
    <ID>LoopWithTooManyJumpStatements:SettingsExporter.kt$SettingsExporter$for ((key, value) in prefs) { val valueString = value.toString() val comps = key.split(".", limit = 2) if (comps.size &lt; 2) { // Skip global settings continue } val keyUuid = comps[0] val keyPart = comps[1] if (keyUuid != accountUuid) { // Setting doesn't belong to the account we're currently writing. continue } val indexOfLastDot = keyPart.lastIndexOf(".") val hasThirdPart = indexOfLastDot != -1 &amp;&amp; indexOfLastDot &lt; keyPart.length - 1 if (hasThirdPart) { val secondPart = keyPart.substring(0, indexOfLastDot) val thirdPart = keyPart.substring(indexOfLastDot + 1) if (secondPart == IDENTITY_DESCRIPTION_KEY) { // This is an identity key. Save identity index for later... thirdPart.toIntOrNull()?.let { identities.add(it) } // ... but don't write it now. continue } if (FolderSettingsDescriptions.SETTINGS.containsKey(thirdPart)) { // This is a folder key. Ignore it. continue } } if (keyPart !in FOLDER_NAME_KEYS) { writeAccountSettingIfValid(serializer, keyPart, valueString, account) } }</ID>
    <ID>LoopWithTooManyJumpStatements:UnreadWidgetMigrations.kt$UnreadWidgetMigrations$for (widgetId in widgetIds) { val accountUuid = preferences.getString("unread_widget.$widgetId", null) ?: continue val account = accountRepository.getAccount(accountUuid) ?: continue val folderServerId = preferences.getString("unread_widget.$widgetId.folder_name", null) if (folderServerId != null) { val folderId = folderRepository.getFolderId(account, folderServerId) putString("unread_widget.$widgetId.folder_id", folderId?.toString()) } remove("unread_widget.$widgetId.folder_name") }</ID>
    <ID>MagicNumber:Account.kt$Account$168</ID>
    <ID>MagicNumber:Account.kt$Account$2</ID>
    <ID>MagicNumber:Account.kt$Account$28</ID>
    <ID>MagicNumber:Account.kt$Account$3</ID>
    <ID>MagicNumber:Account.kt$Account$365</ID>
    <ID>MagicNumber:Account.kt$Account$56</ID>
    <ID>MagicNumber:Account.kt$Account$6</ID>
    <ID>MagicNumber:Account.kt$Account$84</ID>
    <ID>MagicNumber:Account.kt$Account.DeletePolicy.MARK_AS_READ$3</ID>
    <ID>MagicNumber:AccountCreator.kt$AccountCreator$110</ID>
    <ID>MagicNumber:AccountCreator.kt$AccountCreator$143</ID>
    <ID>MagicNumber:AccountCreator.kt$AccountCreator$443</ID>
    <ID>MagicNumber:AccountCreator.kt$AccountCreator$465</ID>
    <ID>MagicNumber:AccountCreator.kt$AccountCreator$587</ID>
    <ID>MagicNumber:AccountCreator.kt$AccountCreator$80</ID>
    <ID>MagicNumber:AccountCreator.kt$AccountCreator$993</ID>
    <ID>MagicNumber:AccountCreator.kt$AccountCreator$995</ID>
    <ID>MagicNumber:AccountItem.kt$AccountItem$200L</ID>
    <ID>MagicNumber:AccountPreferenceSerializer.kt$AccountPreferenceSerializer$10</ID>
    <ID>MagicNumber:AccountPreferenceSerializer.kt$AccountPreferenceSerializer$24</ID>
    <ID>MagicNumber:AccountPreferenceSerializer.kt$AccountPreferenceSerializer$32768</ID>
    <ID>MagicNumber:AccountPreferenceSerializer.kt$AccountPreferenceSerializer$5</ID>
    <ID>MagicNumber:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$3</ID>
    <ID>MagicNumber:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$4</ID>
    <ID>MagicNumber:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$5</ID>
    <ID>MagicNumber:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$6</ID>
    <ID>MagicNumber:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$7</ID>
    <ID>MagicNumber:AppLanguageManager.kt$AppLanguageManager$3</ID>
    <ID>MagicNumber:AppLanguageManager.kt$AppLanguageManager$5</ID>
    <ID>MagicNumber:AutocryptSetupTransferLiveEvent.kt$AutocryptSetupTransferLiveEvent$2000</ID>
    <ID>MagicNumber:BoundaryGenerator.kt$BoundaryGenerator$36</ID>
    <ID>MagicNumber:BoundaryGenerator.kt$BoundaryGenerator$4</ID>
    <ID>MagicNumber:ChunkedDatabaseOperations.kt$1000</ID>
    <ID>MagicNumber:CollectionExtensions.kt$0.75F</ID>
    <ID>MagicNumber:CollectionExtensions.kt$3</ID>
    <ID>MagicNumber:ConfigurationExtensions.kt$24</ID>
    <ID>MagicNumber:ConnectivityManager.kt$23</ID>
    <ID>MagicNumber:ConnectivityManager.kt$24</ID>
    <ID>MagicNumber:ContactLetterBitmapCreator.kt$ContactLetterBitmapCreator$0.65f</ID>
    <ID>MagicNumber:ContactLetterBitmapCreator.kt$ContactLetterBitmapCreator$255</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$10</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$11</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$12</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$13</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$14</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$15</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$16</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$17</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$18</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$19</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$20</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$21</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$3</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$4</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$5</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$6</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$7</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$8</ID>
    <ID>MagicNumber:CopyMessageOperations.kt$CopyMessageOperations$9</ID>
    <ID>MagicNumber:DecoderUtil.kt$DecoderUtil$0x1B</ID>
    <ID>MagicNumber:DecoderUtil.kt$DecoderUtil$0x28</ID>
    <ID>MagicNumber:DecoderUtil.kt$DecoderUtil$0x42</ID>
    <ID>MagicNumber:EmailTextToHtml.kt$EmailTextToHtml$3</ID>
    <ID>MagicNumber:EmailTextToHtml.kt$EmailTextToHtml$4</ID>
    <ID>MagicNumber:EmailTextToHtml.kt$EmailTextToHtml$5</ID>
    <ID>MagicNumber:GeneralSettingsFragment.kt$GeneralSettingsFragment$28</ID>
    <ID>MagicNumber:Hex.kt$Hex$4</ID>
    <ID>MagicNumber:HttpUriParser.kt$HttpUriParser$10</ID>
    <ID>MagicNumber:HttpUriParser.kt$HttpUriParser$255</ID>
    <ID>MagicNumber:HttpUriParser.kt$HttpUriParser$4</ID>
    <ID>MagicNumber:HttpUriParser.kt$HttpUriParser$5</ID>
    <ID>MagicNumber:HttpUriParser.kt$HttpUriParser$6</ID>
    <ID>MagicNumber:HttpUriParser.kt$HttpUriParser$65535</ID>
    <ID>MagicNumber:HttpUriParser.kt$HttpUriParser$7</ID>
    <ID>MagicNumber:HttpUriParser.kt$HttpUriParser$8</ID>
    <ID>MagicNumber:ImapBackendPusher.kt$ImapBackendPusher$1000L</ID>
    <ID>MagicNumber:ImapBackendPusher.kt$ImapBackendPusher$15</ID>
    <ID>MagicNumber:ImapBackendPusher.kt$ImapBackendPusher$60</ID>
    <ID>MagicNumber:InMemoryBackendFolder.kt$InMemoryBackendFolder$25</ID>
    <ID>MagicNumber:K9Activity.kt$K9Activity$31</ID>
    <ID>MagicNumber:K9Drawer.kt$K9Drawer$0x22000000</ID>
    <ID>MagicNumber:K9Drawer.kt$K9Drawer$0xffffff</ID>
    <ID>MagicNumber:MailSyncWorkerManager.kt$MailSyncWorkerManager$1000L</ID>
    <ID>MagicNumber:MailSyncWorkerManager.kt$MailSyncWorkerManager$60L</ID>
    <ID>MagicNumber:MessageBuilderDsl.kt$PartBuilder$1024</ID>
    <ID>MagicNumber:MessageBuilderDsl.kt$PartBuilder$20</ID>
    <ID>MagicNumber:MessageContainerView.kt$MessageContainerView$29</ID>
    <ID>MagicNumber:MessageContainerView.kt$MessageContainerView$3</ID>
    <ID>MagicNumber:MessageListItemAnimator.kt$MessageListItemAnimator$120</ID>
    <ID>MagicNumber:MessageListItemMapper.kt$MessageListItemMapper$52</ID>
    <ID>MagicNumber:MessageReference.kt$MessageReference.Companion$3</ID>
    <ID>MagicNumber:MigrationTo76.kt$MigrationTo76$25</ID>
    <ID>MagicNumber:MigrationTo84.kt$MigrationTo84$3</ID>
    <ID>MagicNumber:MigrationTo84.kt$MigrationTo84$4</ID>
    <ID>MagicNumber:MigrationTo84.kt$MigrationTo84$5</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$62</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$64</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$65</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$66</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$67</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$68</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$69</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$70</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$71</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$72</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$73</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$74</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$75</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$76</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$78</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$79</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$80</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$81</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$82</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$83</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$84</ID>
    <ID>MagicNumber:MimeExtensions.kt$126</ID>
    <ID>MagicNumber:MimeExtensions.kt$33</ID>
    <ID>MagicNumber:MimeExtensions.kt$39</ID>
    <ID>MagicNumber:MimeExtensions.kt$42</ID>
    <ID>MagicNumber:MimeExtensions.kt$90</ID>
    <ID>MagicNumber:MimeExtensions.kt$91</ID>
    <ID>MagicNumber:MimeExtensions.kt$93</ID>
    <ID>MagicNumber:MimeExtensions.kt$94</ID>
    <ID>MagicNumber:MimeHeader.kt$MimeHeader$1024</ID>
    <ID>MagicNumber:MimeHeaderChecker.kt$UnstructuredHeaderChecker$1000</ID>
    <ID>MagicNumber:MimeHeaderChecker.kt$UnstructuredHeaderChecker$998</ID>
    <ID>MagicNumber:MimeHeaderParser.kt$MimeHeaderParser$10</ID>
    <ID>MagicNumber:MimeHeaderParser.kt$MimeHeaderParser$4</ID>
    <ID>MagicNumber:MimeParameterDecoder.kt$MimeParameterDecoder$3</ID>
    <ID>MagicNumber:MimeParameterEncoder.kt$MimeParameterEncoder$126</ID>
    <ID>MagicNumber:MimeParameterEncoder.kt$MimeParameterEncoder$16</ID>
    <ID>MagicNumber:MimeParameterEncoder.kt$MimeParameterEncoder$3</ID>
    <ID>MagicNumber:MimeParameterEncoder.kt$MimeParameterEncoder$33</ID>
    <ID>MagicNumber:MimeParameterEncoder.kt$MimeParameterEncoder$35</ID>
    <ID>MagicNumber:MimeParameterEncoder.kt$MimeParameterEncoder$91</ID>
    <ID>MagicNumber:MimeParameterEncoder.kt$MimeParameterEncoder$93</ID>
    <ID>MagicNumber:NegativeSmtpReplyException.kt$500</ID>
    <ID>MagicNumber:NegativeSmtpReplyException.kt$599</ID>
    <ID>MagicNumber:NotificationLightDecoder.kt$NotificationLightDecoder$0x0000FF</ID>
    <ID>MagicNumber:NotificationLightDecoder.kt$NotificationLightDecoder$0x00FF00</ID>
    <ID>MagicNumber:NotificationLightDecoder.kt$NotificationLightDecoder$0x00FFFF</ID>
    <ID>MagicNumber:NotificationLightDecoder.kt$NotificationLightDecoder$0x00FFFFFF</ID>
    <ID>MagicNumber:NotificationLightDecoder.kt$NotificationLightDecoder$0xFF0000</ID>
    <ID>MagicNumber:NotificationLightDecoder.kt$NotificationLightDecoder$0xFF00FF</ID>
    <ID>MagicNumber:NotificationLightDecoder.kt$NotificationLightDecoder$0xFFFF00</ID>
    <ID>MagicNumber:NotificationLightDecoder.kt$NotificationLightDecoder$0xFFFFFF</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern$3</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern$4</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern$5</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Companion$3</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Companion$4</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Companion$5</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Default$200</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Default$300</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Pattern1$100</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Pattern1$200</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Pattern2$100</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Pattern2$500</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Pattern3$200</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Pattern4$200</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Pattern4$500</ID>
    <ID>MagicNumber:NotificationVibration.kt$VibratePattern.Pattern5$500</ID>
    <ID>MagicNumber:PendingIntentCompat.kt$PendingIntentCompat$23</ID>
    <ID>MagicNumber:PendingIntentCompat.kt$PendingIntentCompat$31</ID>
    <ID>MagicNumber:ProvidersXmlDiscovery.kt$ProvidersXmlDiscovery$143</ID>
    <ID>MagicNumber:ProvidersXmlDiscovery.kt$ProvidersXmlDiscovery$465</ID>
    <ID>MagicNumber:ProvidersXmlDiscovery.kt$ProvidersXmlDiscovery$587</ID>
    <ID>MagicNumber:ProvidersXmlDiscovery.kt$ProvidersXmlDiscovery$993</ID>
    <ID>MagicNumber:PushService.kt$PushService$29</ID>
    <ID>MagicNumber:RealImapConnection.kt$RealImapConnection$4</ID>
    <ID>MagicNumber:RealImapFolder.kt$RealImapFolder$3</ID>
    <ID>MagicNumber:RealImapFolder.kt$RealImapFolder$5</ID>
    <ID>MagicNumber:RealImapFolder.kt$RealImapFolder$6</ID>
    <ID>MagicNumber:RealImapFolder.kt$RealImapFolder$8</ID>
    <ID>MagicNumber:RealImapFolder.kt$RealImapFolder$9</ID>
    <ID>MagicNumber:RecipientLayoutCreator.kt$RecipientLayoutCreator$10</ID>
    <ID>MagicNumber:RecipientMvpView.kt$RecipientMvpView$100.0f</ID>
    <ID>MagicNumber:RecipientMvpView.kt$RecipientMvpView$15</ID>
    <ID>MagicNumber:RecipientNamesView.kt$RecipientNamesView$8</ID>
    <ID>MagicNumber:ReplyToView.kt$ReplyToView$15</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$10</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$11</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$12</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$13</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$14</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$15</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$3</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$4</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$5</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$6</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$7</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$8</ID>
    <ID>MagicNumber:RetrieveFolderOperations.kt$CursorFolderAccessor$9</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$10</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$11</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$12</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$13</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$14</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$15</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$16</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$17</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$3</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$4</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$5</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$6</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$7</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$8</ID>
    <ID>MagicNumber:RetrieveMessageListOperations.kt$CursorMessageAccessor$9</ID>
    <ID>MagicNumber:RetrieveMessageOperations.kt$RetrieveMessageOperations$3</ID>
    <ID>MagicNumber:RetrieveMessageOperations.kt$RetrieveMessageOperations$4</ID>
    <ID>MagicNumber:RetrieveMessageOperations.kt$RetrieveMessageOperations$5</ID>
    <ID>MagicNumber:ServerSettingsSerializer.kt$ServerSettingsAdapter$3</ID>
    <ID>MagicNumber:ServerSettingsSerializer.kt$ServerSettingsAdapter$4</ID>
    <ID>MagicNumber:ServerSettingsSerializer.kt$ServerSettingsAdapter$5</ID>
    <ID>MagicNumber:ServerSettingsSerializer.kt$ServerSettingsAdapter$6</ID>
    <ID>MagicNumber:ServerSettingsSerializer.kt$ServerSettingsAdapter$7</ID>
    <ID>MagicNumber:SettingsExporter.kt$SettingsExporter$3</ID>
    <ID>MagicNumber:SettingsImportListItems.kt$ImportListItem$3</ID>
    <ID>MagicNumber:SettingsImportListItems.kt$ImportListItem$4</ID>
    <ID>MagicNumber:SettingsViewModel.kt$SettingsViewModel$500</ID>
    <ID>MagicNumber:SimpleHighlightView.kt$SimpleHighlightView$0xFFFFFF</ID>
    <ID>MagicNumber:SimpleHighlightView.kt$SimpleHighlightView$100</ID>
    <ID>MagicNumber:SimpleHighlightView.kt$SimpleHighlightView$128</ID>
    <ID>MagicNumber:SimpleHighlightView.kt$SimpleHighlightView$80</ID>
    <ID>MagicNumber:SizeFormatter.kt$SizeFormatter$1000L</ID>
    <ID>MagicNumber:SizeFormatter.kt$SizeFormatter$1000f</ID>
    <ID>MagicNumber:SizeFormatter.kt$SizeFormatter$1_000_000L</ID>
    <ID>MagicNumber:SizeFormatter.kt$SizeFormatter$999_950L</ID>
    <ID>MagicNumber:SizeFormatter.kt$SizeFormatter$999_950_000L</ID>
    <ID>MagicNumber:SmtpResponse.kt$SmtpResponse$400</ID>
    <ID>MagicNumber:SmtpResponseParser.kt$SmtpResponseParser$10</ID>
    <ID>MagicNumber:SmtpResponseParser.kt$SmtpResponseParser$100</ID>
    <ID>MagicNumber:SmtpResponseParser.kt$SmtpResponseParser$126</ID>
    <ID>MagicNumber:SmtpResponseParser.kt$SmtpResponseParser$250</ID>
    <ID>MagicNumber:SmtpResponseParser.kt$SmtpResponseParser$32</ID>
    <ID>MagicNumber:SmtpResponseParser.kt$SmtpResponseParser$33</ID>
    <ID>MagicNumber:SmtpResponseParser.kt$SmtpResponseParser$4</ID>
    <ID>MagicNumber:SmtpResponseParser.kt$SmtpResponseParser$5</ID>
    <ID>MagicNumber:SmtpTransport.kt$SmtpTransport$1000</ID>
    <ID>MagicNumber:SmtpTransport.kt$SmtpTransport$1024</ID>
    <ID>MagicNumber:StatusCodeClass.kt$StatusCodeClass.PERMANENT_FAILURE$5</ID>
    <ID>MagicNumber:StatusCodeClass.kt$StatusCodeClass.PERSISTENT_TRANSIENT_FAILURE$4</ID>
    <ID>MagicNumber:StorageMigrationTo11.kt$StorageMigrationTo11$3</ID>
    <ID>MagicNumber:StorageMigrationTo17.kt$StorageMigrationTo17$0x0000FF</ID>
    <ID>MagicNumber:StorageMigrationTo17.kt$StorageMigrationTo17$0x00FF00</ID>
    <ID>MagicNumber:StorageMigrationTo17.kt$StorageMigrationTo17$0x00FFFF</ID>
    <ID>MagicNumber:StorageMigrationTo17.kt$StorageMigrationTo17$0x00FFFFFF</ID>
    <ID>MagicNumber:StorageMigrationTo17.kt$StorageMigrationTo17$0xFF0000</ID>
    <ID>MagicNumber:StorageMigrationTo17.kt$StorageMigrationTo17$0xFF00FF</ID>
    <ID>MagicNumber:StorageMigrationTo17.kt$StorageMigrationTo17$0xFFFF00</ID>
    <ID>MagicNumber:StorageMigrationTo17.kt$StorageMigrationTo17$0xFFFFFF</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$10</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$11</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$12</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$13</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$14</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$15</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$16</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$17</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$18</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$19</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$20</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$3</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$4</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$5</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$6</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$7</ID>
    <ID>MagicNumber:StorageMigrations.kt$StorageMigrations$8</ID>
    <ID>MagicNumber:ThemeManager.kt$ThemeManager$28</ID>
    <ID>MagicNumber:ThreadMessageOperations.kt$ThreadMessageOperations$3</ID>
    <ID>MagicNumber:TimberLogger.kt$TimberLogger$26</ID>
    <ID>MagicNumber:UidValidityResponse.kt$UidValidityResponse.Companion$0xFFFFFFFFL</ID>
    <ID>MagicNumber:Utf8.kt$0x010000</ID>
    <ID>MagicNumber:Utf8.kt$0x10000</ID>
    <ID>MagicNumber:Utf8.kt$0x3f</ID>
    <ID>MagicNumber:Utf8.kt$0x80</ID>
    <ID>MagicNumber:Utf8.kt$0x800</ID>
    <ID>MagicNumber:Utf8.kt$0xc0</ID>
    <ID>MagicNumber:Utf8.kt$0xd800</ID>
    <ID>MagicNumber:Utf8.kt$0xdbff</ID>
    <ID>MagicNumber:Utf8.kt$0xdc00</ID>
    <ID>MagicNumber:Utf8.kt$0xdfff</ID>
    <ID>MagicNumber:Utf8.kt$0xe0</ID>
    <ID>MagicNumber:Utf8.kt$0xe000</ID>
    <ID>MagicNumber:Utf8.kt$0xf0</ID>
    <ID>MagicNumber:Utf8.kt$10</ID>
    <ID>MagicNumber:Utf8.kt$12</ID>
    <ID>MagicNumber:Utf8.kt$18</ID>
    <ID>MagicNumber:Utf8.kt$3</ID>
    <ID>MagicNumber:Utf8.kt$4</ID>
    <ID>MagicNumber:Utf8.kt$6</ID>
    <ID>MatchingDeclarationName:Main.kt$HtmlCleaner : CliktCommand</ID>
    <ID>MaxLineLength:BoundaryGeneratorTest.kt$BoundaryGeneratorTest$0</ID>
    <ID>MaxLineLength:ComposeCryptoStatus.kt$ComposeCryptoStatus$OpenPgpApiManager.OpenPgpProviderState.ERROR, OpenPgpApiManager.OpenPgpProviderState.UI_REQUIRED -&gt; CryptoStatusDisplayType.ERROR</ID>
    <ID>MaxLineLength:EmailAddressValidatorTest.kt$EmailAddressValidatorTest$Assert.assertTrue(validator.isValidAddressOnly("\"very.(),:;&lt;&gt;[]\\\".VERY.\\\"very@\\\\ \\\"very\\\".unusual\"@strange.example.com"))</ID>
    <ID>MaxLineLength:GenericUriParserTest.kt$GenericUriParserTest$assertUriValid("xmpp:node@example.com/repulsive%20!%23%22\$%25&amp;'()*+,-.%2F:;%3C=%3E%3F%40%5B%5C%5D%5E_%60%7B%7C%7D~resource")</ID>
    <ID>MaxLineLength:HtmlSanitizerTest.kt$HtmlSanitizerTest$assertThat(result.toCompactString()).isEqualTo("&lt;html&gt;&lt;head&gt;&lt;style&gt;keep this&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;")</ID>
    <ID>MaxLineLength:ImapSync.kt$ImapSync.&lt;no name provided&gt;$// TODO: This might be the source of poll count errors in the UI. Is todo always the same as ofTotal</ID>
    <ID>MaxLineLength:JmapBackend.kt$JmapBackend$override</ID>
    <ID>MaxLineLength:MessageViewFragment.kt$MessageViewFragment$// When the menu is hidden, the message associated with this fragment is no longer active. If the user returns</ID>
    <ID>MaxLineLength:MigrationTo70.kt$MigrationTo70$db.execSQL("CREATE TRIGGER delete_folder BEFORE DELETE ON folders BEGIN DELETE FROM messages WHERE old.id = folder_id; END;")</ID>
    <ID>MaxLineLength:MigrationTo84.kt$MigrationTo84$"SELECT id, to_list, cc_list, bcc_list, reply_to_list, sender_list FROM messages WHERE empty = 0 AND deleted = 0"</ID>
    <ID>MaxLineLength:NotificationHelper.kt$NotificationHelper$// UID 123 does not have permission to content://media/external_primary/audio/media/42?title=Coins&amp;canonical=1 [user 0]</ID>
    <ID>MaxLineLength:Pop3ConnectionTest.kt$Pop3ConnectionTest$fun</ID>
    <ID>MaxLineLength:RealImapFolder.kt$RealImapFolder$// [MESSAGE, RFC822, [NAME, Fwd: [#HTR-517941]: update plans at 1am Friday - Memory allocation - displayware.eml], NIL, NIL, 7BIT, 5974, NIL, [INLINE, [FILENAME*0, Fwd: [#HTR-517941]: update plans at 1am Friday - Memory all, FILENAME*1, ocation - displayware.eml]], NIL]</ID>
    <ID>MaxLineLength:RealImapFolder.kt$RealImapFolder$val canCreateForwardedFlag = canCreateKeywords || internalImapStore.getPermanentFlagsIndex().contains(Flag.FORWARDED)</ID>
    <ID>MaxLineLength:RealImapStoreTest.kt$RealImapStoreTest$fun</ID>
    <ID>MaxLineLength:RealOAuth2TokenProvider.kt$RealOAuth2TokenProvider$authState</ID>
    <ID>MaxLineLength:RetrieveMessageListOperationsTest.kt$RetrieveMessageListOperationsTest$fun</ID>
    <ID>MayBeConst:SummaryNotificationDataCreatorTest.kt$private val TIMESTAMP = 0L</ID>
    <ID>MemberNameEqualsClassName:HtmlModification.kt$HtmlModification.Replace$abstract fun replace(textToHtml: TextToHtml)</ID>
    <ID>MemberNameEqualsClassName:ReplyToView.kt$ReplyToView$private val replyToView: RecipientSelectView = activity.findViewById(R.id.reply_to)</ID>
    <ID>NestedBlockDepth:HttpUriParser.kt$HttpUriParser$private fun tryMatchIpv6Address(text: CharSequence, startPos: Int): Int</ID>
    <ID>NestedBlockDepth:ImapSync.kt$ImapSync$private fun synchronizeMailboxSynchronous(folder: String, syncConfig: SyncConfig, listener: SyncListener)</ID>
    <ID>NestedBlockDepth:MessageList.kt$MessageList$override fun onBackPressed()</ID>
    <ID>NestedBlockDepth:MessageList.kt$MessageList$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>NestedBlockDepth:MessageList.kt$MessageList$private fun decodeExtrasToLaunchData(intent: Intent): LaunchData</ID>
    <ID>NestedBlockDepth:ProvidersXmlDiscovery.kt$ProvidersXmlDiscovery$private fun parseProviders(xml: XmlResourceParser, domain: String): Provider?</ID>
    <ID>NestedBlockDepth:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) override fun appendMessages(messages: List&lt;Message&gt;): Map&lt;String, String&gt;?</ID>
    <ID>NestedBlockDepth:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) override fun fetch( messages: List&lt;ImapMessage&gt;, fetchProfile: FetchProfile, listener: FetchListener?, maxDownloadSize: Int, )</ID>
    <ID>NestedBlockDepth:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) override fun fetchPart( message: ImapMessage, part: Part, bodyFactory: BodyFactory, maxDownloadSize: Int, )</ID>
    <ID>NestedBlockDepth:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) private fun handleFetchResponse(message: ImapMessage, fetchList: ImapList): Any?</ID>
    <ID>NestedBlockDepth:RealImapFolder.kt$RealImapFolder$@Throws(MessagingException::class) private fun parseBodyStructure(bs: ImapList, part: Part, id: String)</ID>
    <ID>NestedBlockDepth:SettingsExporter.kt$SettingsExporter$private fun writeAccount(serializer: XmlSerializer, account: Account, prefs: Map&lt;String, Any&gt;)</ID>
    <ID>NestedBlockDepth:SettingsExporter.kt$SettingsExporter$private fun writeIdentity( serializer: XmlSerializer, accountUuid: String, identity: String, prefs: Map&lt;String, Any&gt;, )</ID>
    <ID>NestedBlockDepth:SingleMessageNotificationCreator.kt$SingleMessageNotificationCreator$private fun NotificationBuilder.setWearActions(notificationData: SingleNotificationData)</ID>
    <ID>NestedBlockDepth:SmtpTransport.kt$SmtpTransport$@VisibleForTesting @Throws(MessagingException::class) internal fun open()</ID>
    <ID>NestedBlockDepth:SummaryNotificationCreator.kt$SummaryNotificationCreator$private fun NotificationBuilder.setWearActions( account: Account, notificationData: SummaryInboxNotificationData, )</ID>
    <ID>NestedBlockDepth:ThunderbirdAutoconfigParser.kt$ThunderbirdAutoconfigParser$private fun parseServer(xpp: XmlPullParser, nodeName: String, email: String): DiscoveredServerSettings</ID>
    <ID>ReturnCount:AccountSetupBasics.kt$AccountSetupBasics$private fun providersXmlDiscoveryDiscover(email: String): ConnectionSettings?</ID>
    <ID>ReturnCount:AccountSetupBasics.kt$private fun DiscoveredServerSettings.toServerSettings(): ServerSettings?</ID>
    <ID>ReturnCount:AccountSetupCheckSettings.kt$AccountSetupCheckSettings.CheckAccountTask$private fun isCanceled(): Boolean</ID>
    <ID>ReturnCount:AutocryptDraftStateHeaderParser.kt$AutocryptDraftStateHeaderParser$fun parseAutocryptDraftStateHeader(headerValue: String): AutocryptDraftStateHeader?</ID>
    <ID>ReturnCount:ChooseFolderActivity.kt$ChooseFolderActivity$private fun decodeArguments(savedInstanceState: Bundle?): Boolean</ID>
    <ID>ReturnCount:CommandSetFlag.kt$CommandSetFlag$fun setFlag(folderServerId: String, messageServerIds: List&lt;String&gt;, flag: Flag, newState: Boolean)</ID>
    <ID>ReturnCount:DecoderUtil.kt$DecoderUtil$@JvmStatic fun decodeEncodedWords(body: String, message: Message?): String</ID>
    <ID>ReturnCount:DecoderUtil.kt$DecoderUtil$private fun extractEncodedWord(body: String, begin: Int, end: Int, message: Message?): EncodedWord?</ID>
    <ID>ReturnCount:EditIdentity.kt$EditIdentity$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:EmailSection.kt$EmailSection$override fun subSequence(startIndex: Int, endIndex: Int): CharSequence</ID>
    <ID>ReturnCount:FormatFlowedHelper.kt$FormatFlowedHelper$@JvmStatic fun checkFormatFlowed(contentTypeHeaderValue: String?): FormatFlowedResult</ID>
    <ID>ReturnCount:HtmlSignatureRemover.kt$HtmlSignatureRemover.StripSignatureFilter$override fun head(node: Node, depth: Int): HeadFilterDecision</ID>
    <ID>ReturnCount:HtmlSignatureRemover.kt$HtmlSignatureRemover.StripSignatureFilter$private fun Node.findPrecedingLineBreak(): Node?</ID>
    <ID>ReturnCount:HtmlSignatureRemover.kt$HtmlSignatureRemover.StripSignatureFilter$private fun Node.isFollowedByLineBreak(): Boolean</ID>
    <ID>ReturnCount:HttpUriParser.kt$HttpUriParser$override fun parseUri(text: CharSequence, startPos: Int): UriMatch?</ID>
    <ID>ReturnCount:HttpUriParser.kt$HttpUriParser$private fun tryMatchAuthority(text: CharSequence, startPos: Int): Int</ID>
    <ID>ReturnCount:HttpUriParser.kt$HttpUriParser$private fun tryMatchDomainName(text: CharSequence, startPos: Int): Int</ID>
    <ID>ReturnCount:HttpUriParser.kt$HttpUriParser$private fun tryMatchIpv4Address(text: CharSequence, startPos: Int, portAllowed: Boolean): Int</ID>
    <ID>ReturnCount:HttpUriParser.kt$HttpUriParser$private fun tryMatchIpv6Address(text: CharSequence, startPos: Int): Int</ID>
    <ID>ReturnCount:ImapSync.kt$ImapSync$private fun isOldMessage(messageServerId: String, highestKnownUid: Long?): Boolean</ID>
    <ID>ReturnCount:ImapSync.kt$ImapSync$private fun syncFlags(syncConfig: SyncConfig, backendFolder: BackendFolder, remoteMessage: ImapMessage): Boolean</ID>
    <ID>ReturnCount:JmapAccountDiscovery.kt$JmapAccountDiscovery$fun discover(emailAddress: String, password: String): JmapDiscoveryResult</ID>
    <ID>ReturnCount:K9NotificationStrategy.kt$K9NotificationStrategy$override fun shouldNotifyForMessage( account: Account, localFolder: LocalFolder, message: LocalMessage, isOldMessage: Boolean, ): Boolean</ID>
    <ID>ReturnCount:ListUnsubscribeHelper.kt$ListUnsubscribeHelper$fun getPreferredListUnsubscribeUri(message: Message): UnsubscribeUri?</ID>
    <ID>ReturnCount:ListUnsubscribeHelper.kt$ListUnsubscribeHelper$private fun extractUri(headerValue: String?): Uri?</ID>
    <ID>ReturnCount:MailSyncWorker.kt$MailSyncWorker$override fun doWork(): Result</ID>
    <ID>ReturnCount:MessageHelper.kt$MessageHelper.Companion$@JvmStatic fun toFriendly( address: Address, contactRepository: ContactRepository?, showCorrespondentNames: Boolean, changeContactNameColor: Boolean, contactNameColor: Int, ): CharSequence</ID>
    <ID>ReturnCount:MessageList.kt$MessageList$private fun decodeExtrasToLaunchData(intent: Intent): LaunchData</ID>
    <ID>ReturnCount:MessageList.kt$MessageList$private fun onCustomKeyDown(event: KeyEvent): Boolean</ID>
    <ID>ReturnCount:MessageList.kt$MessageList$public override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>ReturnCount:MessageList.kt$MessageList$public override fun onNewIntent(intent: Intent)</ID>
    <ID>ReturnCount:MessageListAdapter.kt$MessageListAdapter$private fun buildStatusHolder(forwarded: Boolean, answered: Boolean): Drawable?</ID>
    <ID>ReturnCount:MessageListAdapter.kt$MessageListAdapter$private fun calculateSelectionCount(): Int</ID>
    <ID>ReturnCount:MessageListFragment.kt$MessageListFragment$override fun onFooterClicked()</ID>
    <ID>ReturnCount:MessageListFragment.kt$MessageListFragment$private fun checkCopyOrMovePossible(messages: List&lt;MessageReference&gt;, operation: FolderOperation): Boolean</ID>
    <ID>ReturnCount:MessageListFragment.kt$MessageListFragment$private fun isSpecialFolder(specialFolderId: Long?): Boolean</ID>
    <ID>ReturnCount:MessageListFragment.kt$MessageListFragment$private fun rememberSortOverride(messageReference: MessageReference?)</ID>
    <ID>ReturnCount:MessageListFragment.kt$MessageListFragment$private fun scrollToMessage(messageReference: MessageReference)</ID>
    <ID>ReturnCount:MessageListSwipeCallback.kt$MessageListSwipeCallback$override fun getMovementFlags(recyclerView: RecyclerView, viewHolder: ViewHolder): Int</ID>
    <ID>ReturnCount:MessageReference.kt$MessageReference.Companion$@JvmStatic fun parse(identity: String?): MessageReference?</ID>
    <ID>ReturnCount:MessageRepository.kt$MessageRepository$private fun List&lt;Header&gt;.parseDate(headerName: String): MessageDate</ID>
    <ID>ReturnCount:MessageTopView.kt$MessageTopView$private fun shouldShowPicturesFromSender(showPicturesSetting: ShowPictures, message: Message): Boolean</ID>
    <ID>ReturnCount:MessageViewFragment.kt$MessageViewFragment$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:MimeParameterDecoder.kt$MimeParameterDecoder$private fun areParameterSectionsValid(parameterSections: MutableList&lt;ParameterSection&gt;): Boolean</ID>
    <ID>ReturnCount:MimeParameterDecoder.kt$MimeParameterDecoder$private fun convertToParameterSection(parameterName: String, parameterValue: ParameterValue): ParameterSection?</ID>
    <ID>ReturnCount:NotificationContentCreator.kt$NotificationContentCreator$private fun getMessageSender(account: Account, message: Message): String?</ID>
    <ID>ReturnCount:NotificationDataStore.kt$NotificationDataStore$@Synchronized fun removeNotifications( account: Account, selector: (List&lt;MessageReference&gt;) -&gt; List&lt;MessageReference&gt;, ): RemoveNotificationsResult?</ID>
    <ID>ReturnCount:PreviewTextExtractor.kt$PreviewTextExtractor$private fun extractUnquotedText(text: String): String</ID>
    <ID>ReturnCount:ProvidersXmlDiscovery.kt$ProvidersXmlDiscovery$override fun discover(email: String): DiscoveryResults?</ID>
    <ID>ReturnCount:ProvidersXmlDiscovery.kt$ProvidersXmlDiscovery$private fun Provider.toIncomingServerSettings(email: String): DiscoveredServerSettings?</ID>
    <ID>ReturnCount:ProvidersXmlDiscovery.kt$ProvidersXmlDiscovery$private fun Provider.toOutgoingServerSettings(email: String): DiscoveredServerSettings?</ID>
    <ID>ReturnCount:RealImapFolder.kt$RealImapFolder$@Throws(IOException::class, MessagingException::class) override fun areMoreMessagesAvailable(indexOfOldestMessage: Int, earliestDate: Date?): Boolean</ID>
    <ID>ReturnCount:RealImapFolderIdler.kt$RealImapFolderIdler$private fun ImapFolder.idle(): IdleResult</ID>
    <ID>ReturnCount:RealImapStore.kt$RealImapStore$private fun removePrefixFromFolderName(folderName: String): String?</ID>
    <ID>ReturnCount:RecipientLayoutCreator.kt$RecipientLayoutCreator$fun createRecipientLayout( recipientNames: List&lt;CharSequence&gt;, totalNumberOfRecipients: Int, availableWidth: Int, ): RecipientLayoutData</ID>
    <ID>ReturnCount:RecipientLayoutCreator.kt$RecipientLayoutCreator$private fun doesTextFitAvailableWidth( displayRecipients: CharSequence, additionalRecipients: CharSequence, availableWidth: Int, ): Boolean</ID>
    <ID>ReturnCount:RecipientPresenter.kt$RecipientPresenter$fun checkRecipientsOkForSending(): Boolean</ID>
    <ID>ReturnCount:RecipientPresenter.kt$RecipientPresenter$private fun toggleEncryptionState(showGotIt: Boolean)</ID>
    <ID>ReturnCount:SaveMessageOperationsTest.kt$SaveMessageOperationsTest$private fun Message.getDownloadState(): MessageDownloadState</ID>
    <ID>ReturnCount:ShareIntentBuilder.kt$ShareIntentBuilder$private fun extractBodyText(message: LocalMessage): String</ID>
    <ID>ReturnCount:SmtpResponseParser.kt$SmtpResponseParser$fun readHelloResponse(): SmtpHelloResponse</ID>
    <ID>ReturnCount:StorageMigrationTo19.kt$StorageMigrationTo19$private fun markIfGmailAccount(accountUuid: String)</ID>
    <ID>ReturnCount:TextPartFinder.kt$TextPartFinder$private fun findTextPartInMultipart(multipart: Multipart): Part?</ID>
    <ID>ReturnCount:TextPartFinder.kt$TextPartFinder$private fun findTextPartInMultipartAlternative(multipart: Multipart): Part?</ID>
    <ID>ReturnCount:TouchInterceptView.kt$TouchInterceptView$private fun handleOnInterceptTouchEvent(event: MotionEvent)</ID>
    <ID>ReturnCount:UidReverseComparator.kt$UidReverseComparator$override fun compare(messageLeft: Message, messageRight: Message): Int</ID>
    <ID>ReturnCount:UidValidityResponse.kt$UidValidityResponse.Companion$@JvmStatic fun parse(response: ImapResponse): UidValidityResponse?</ID>
    <ID>ReturnCount:UnreadWidgetConfigurationFragment.kt$UnreadWidgetConfigurationFragment$private fun validateWidget(): Boolean</ID>
    <ID>ReturnCount:UnreadWidgetDataProvider.kt$UnreadWidgetDataProvider$private fun loadFolderData(configuration: UnreadWidgetConfiguration): UnreadWidgetData?</ID>
    <ID>SpreadOperator:ConfigurationExtensions.kt$(*locales.toTypedArray())</ID>
    <ID>SpreadOperator:K9Drawer.kt$K9Drawer$(*accountItems)</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter$(*Address.parse(trustId))</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter$(*bccAddresses)</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter$(*ccAddresses)</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter$(*mailTo.bcc)</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter$(*mailTo.cc)</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter$(*mailTo.to)</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter$(*message.getRecipients(RecipientType.BCC))</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter$(*message.getRecipients(RecipientType.CC))</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter$(*message.getRecipients(RecipientType.TO))</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter$(*replyToAddresses.cc)</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter$(*replyToAddresses.to)</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter$(*toAddresses)</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter.&lt;no name provided&gt;$(*recipientArray)</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter.&lt;no name provided&gt;$(context, account.openPgpProvider, *alwaysBccAddresses)</ID>
    <ID>SpreadOperator:RecipientPresenter.kt$RecipientPresenter.&lt;no name provided&gt;$(recipientType, *recipientArray)</ID>
    <ID>SpreadOperator:ReplyToView.kt$ReplyToView$(*recipients)</ID>
    <ID>SwallowedException:AboutFragment.kt$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:AuthViewModel.kt$AuthViewModel$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:CommandRefreshFolderListTest.kt$CommandRefreshFolderListTest$e: AuthenticationFailedException</ID>
    <ID>SwallowedException:ContactPictureLoader.kt$ContactPictureLoader$e: Exception</ID>
    <ID>SwallowedException:DecoderUtil.kt$DecoderUtil$e: IOException</ID>
    <ID>SwallowedException:DecoderUtil.kt$DecoderUtil$e: MessagingException</ID>
    <ID>SwallowedException:JmapAccountDiscovery.kt$JmapAccountDiscovery$e: EndpointNotFoundException</ID>
    <ID>SwallowedException:JmapAccountDiscovery.kt$JmapAccountDiscovery$e: UnauthorizedException</ID>
    <ID>SwallowedException:JmapAccountDiscovery.kt$JmapAccountDiscovery$e: UnknownHostException</ID>
    <ID>SwallowedException:K9BackendFolderTest.kt$K9BackendFolderTest$e: IllegalStateException</ID>
    <ID>SwallowedException:LocalKeyStore.kt$LocalKeyStore$e: FileNotFoundException</ID>
    <ID>SwallowedException:LocalKeyStore.kt$LocalKeyStore$e: KeyStoreException</ID>
    <ID>SwallowedException:MessageContainerView.kt$MessageContainerView$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:MessageDetailsViewModel.kt$MessageDetailsViewModel$e: Exception</ID>
    <ID>SwallowedException:MessageListFragment.kt$MessageListFragment$e: ClassCastException</ID>
    <ID>SwallowedException:MessageListFragment.kt$MessageListFragment$e: MessagingException</ID>
    <ID>SwallowedException:MessageRepository.kt$MessageRepository$e: Exception</ID>
    <ID>SwallowedException:MessageViewContainerFragment.kt$MessageViewContainerFragment$e: ClassCastException</ID>
    <ID>SwallowedException:MessageViewFragment.kt$MessageViewFragment$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:MessageViewFragment.kt$MessageViewFragment$e: ClassCastException</ID>
    <ID>SwallowedException:MimeParameterDecoder.kt$MimeParameterDecoder$e: IllegalCharsetNameException</ID>
    <ID>SwallowedException:MimeParameterDecoder.kt$MimeParameterDecoder$e: MimeHeaderParserException</ID>
    <ID>SwallowedException:MimeType.kt$MimeType.Companion$e: IllegalArgumentException</ID>
    <ID>SwallowedException:PgpMessageBuilderTest.kt$PgpMessageBuilderTest.Companion$e: IOException</ID>
    <ID>SwallowedException:PgpMessageBuilderTest.kt$PgpMessageBuilderTest.Companion$e: MessagingException</ID>
    <ID>SwallowedException:PushInfoFragment.kt$PushInfoFragment$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:QuoteDateFormatter.kt$QuoteDateFormatter$e: Exception</ID>
    <ID>SwallowedException:RealImapConnection.kt$RealImapConnection$e: NegativeImapResponseException</ID>
    <ID>SwallowedException:RealImapFolder.kt$RealImapFolder$e: NegativeImapResponseException</ID>
    <ID>SwallowedException:RealImapStore.kt$RealImapStore$e: CharacterCodingException</ID>
    <ID>SwallowedException:RealImapStore.kt$RealImapStore$ioe: IOException</ID>
    <ID>SwallowedException:SaveMessageOperations.kt$SaveMessageOperations$e: IOException</ID>
    <ID>SwallowedException:SettingsExportViewModel.kt$SettingsExportViewModel$e: Exception</ID>
    <ID>SwallowedException:SettingsExporter.kt$SettingsExporter$e: InvalidSettingValueException</ID>
    <ID>SwallowedException:SettingsListFragment.kt$SettingsListFragment$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:SmtpTransport.kt$SmtpTransport$e: NegativeSmtpReplyException</ID>
    <ID>SwallowedException:SmtpTransport.kt$SmtpTransport$exception: NegativeSmtpReplyException</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:RealImapConnection.kt$RealImapConnection$Exception()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:SmtpTransport.kt$SmtpTransport$RuntimeException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:TimberLogger.kt$TimberLogger$Throwable()</ID>
    <ID>ThrowsCount:CommandRefreshFolderList.kt$CommandRefreshFolderList$fun refreshFolderList()</ID>
    <ID>ThrowsCount:LocalKeyStore.kt$LocalKeyStore$private fun writeCertificateFile()</ID>
    <ID>ThrowsCount:MimeHeaderChecker.kt$UnstructuredHeaderChecker$fun checkHeaderValue()</ID>
    <ID>ThrowsCount:RealImapConnection.kt$RealImapConnection$private fun authenticate(): List&lt;ImapResponse&gt;</ID>
    <ID>ThrowsCount:SmtpTransport.kt$SmtpTransport$@Throws(MessagingException::class) fun sendMessage(message: Message)</ID>
    <ID>ThrowsCount:SmtpTransport.kt$SmtpTransport$@VisibleForTesting @Throws(MessagingException::class) internal fun open()</ID>
    <ID>ThrowsCount:SmtpTransport.kt$SmtpTransport$private fun saslAuthCramMD5()</ID>
    <ID>TooGenericExceptionCaught:AccountRemover.kt$AccountRemover$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AccountSetupCheckSettings.kt$AccountSetupCheckSettings.CheckAccountTask$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AuthViewModel.kt$AuthViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AutocryptSetupTransferLiveEvent.kt$AutocryptSetupTransferLiveEvent$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BootCompleteReceiver.kt$BootCompleteManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CommandRefreshFolderList.kt$CommandRefreshFolderList$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CommandSync.kt$CommandSync$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ContactPhotoLoader.kt$ContactPhotoLoader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ContactPictureLoader.kt$ContactPictureLoader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GeneralSettingsViewModel.kt$GeneralSettingsViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImapFolderPusher.kt$ImapFolderPusher$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImapSync.kt$ImapSync$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImapSync.kt$ImapSync.&lt;no name provided&gt;$e: Exception</ID>
    <ID>TooGenericExceptionCaught:JmapAccountDiscovery.kt$JmapAccountDiscovery$e: Exception</ID>
    <ID>TooGenericExceptionCaught:K9.kt$K9$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LiveDataLoader.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:LocalKeyStore.kt$LocalKeyStore$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MessageCountsProvider.kt$DefaultMessageCountsProvider$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MessageDetailsViewModel.kt$MessageDetailsViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MessageListFragment.kt$MessageListFragment$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MessageListLoader.kt$MessageListLoader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MessageListWidgetManager.kt$MessageListWidgetManager$e: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:MessageRepository.kt$MessageRepository$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ProvidersXmlDiscovery.kt$ProvidersXmlDiscovery$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PushServiceManager.kt$PushServiceManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:QuoteDateFormatter.kt$QuoteDateFormatter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RealGeneralSettingsManager.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RealImapConnection.kt$RealImapConnection$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsExportViewModel.kt$SettingsExportViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsExporter.kt$SettingsExporter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsImportViewModel.kt$SettingsImportViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SmtpTransport.kt$SmtpTransport$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SystemLocaleManager.kt$SystemLocaleManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UnreadWidgetProvider.kt$UnreadWidgetProvider$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UnreadWidgetUpdateListener.kt$UnreadWidgetUpdateListener$e: Exception</ID>
    <ID>TooGenericExceptionThrown:AccountSettingsActivity.kt$AccountSettingsActivity$throw RuntimeException("getSupportActionBar() == null")</ID>
    <ID>TooGenericExceptionThrown:AccountSetupCheckSettings.kt$AccountSetupCheckSettings$throw RuntimeException("Called showDialog(int) with unknown dialog id.")</ID>
    <ID>TooGenericExceptionThrown:GeneralSettingsActivity.kt$GeneralSettingsActivity$throw RuntimeException("getSupportActionBar() == null")</ID>
    <ID>TooGenericExceptionThrown:ImapSync.kt$ImapSync$throw Exception("Message count $remoteMessageCount for folder $folder")</ID>
    <ID>TooGenericExceptionThrown:MessageListFragment.kt$MessageListFragment$throw RuntimeException("Called showDialog(int) with unknown dialog id.")</ID>
    <ID>TooGenericExceptionThrown:MessageViewFragment.kt$MessageViewFragment$throw RuntimeException("Called showDialog(int) with unknown dialog id.")</ID>
    <ID>TooManyFunctions:Account.kt$Account : BaseAccount</ID>
    <ID>TooManyFunctions:AccountSettingsDataStore.kt$AccountSettingsDataStore : PreferenceDataStore</ID>
    <ID>TooManyFunctions:AccountSettingsFragment.kt$AccountSettingsFragment : PreferenceFragmentCompatConfirmationDialogFragmentListener</ID>
    <ID>TooManyFunctions:AccountSetupBasics.kt$AccountSetupBasics : K9Activity</ID>
    <ID>TooManyFunctions:AccountSetupCheckSettings.kt$AccountSetupCheckSettings : K9ActivityConfirmationDialogFragmentListener</ID>
    <ID>TooManyFunctions:AuthViewModel.kt$AuthViewModel : AndroidViewModel</ID>
    <ID>TooManyFunctions:AutocryptKeyTransferActivity.kt$AutocryptKeyTransferActivity : K9Activity</ID>
    <ID>TooManyFunctions:Backend.kt$Backend</ID>
    <ID>TooManyFunctions:BackendFolder.kt$BackendFolder</ID>
    <ID>TooManyFunctions:ChooseFolderActivity.kt$ChooseFolderActivity : K9Activity</ID>
    <ID>TooManyFunctions:CommandSync.kt$CommandSync</ID>
    <ID>TooManyFunctions:CoreResourceProvider.kt$CoreResourceProvider</ID>
    <ID>TooManyFunctions:DeleteMessageOperations.kt$DeleteMessageOperations</ID>
    <ID>TooManyFunctions:DemoBackend.kt$DemoBackend : Backend</ID>
    <ID>TooManyFunctions:FolderRepository.kt$FolderRepository</ID>
    <ID>TooManyFunctions:FolderSettingsFragment.kt$FolderSettingsFragment : PreferenceFragmentCompatConfirmationDialogFragmentListener</ID>
    <ID>TooManyFunctions:GeneralSettingsDataStore.kt$GeneralSettingsDataStore : PreferenceDataStore</ID>
    <ID>TooManyFunctions:GeneralSettingsFragment.kt$GeneralSettingsFragment : PreferenceFragmentCompat</ID>
    <ID>TooManyFunctions:HttpUriParser.kt$HttpUriParser : UriParser</ID>
    <ID>TooManyFunctions:ImapBackend.kt$ImapBackend : Backend</ID>
    <ID>TooManyFunctions:ImapBackendPusher.kt$ImapBackendPusher : BackendPusherImapPusherCallback</ID>
    <ID>TooManyFunctions:ImapConnection.kt$ImapConnection</ID>
    <ID>TooManyFunctions:ImapFolder.kt$ImapFolder</ID>
    <ID>TooManyFunctions:ImapSync.kt$ImapSync</ID>
    <ID>TooManyFunctions:InMemoryBackendFolder.kt$InMemoryBackendFolder : BackendFolder</ID>
    <ID>TooManyFunctions:JmapBackend.kt$JmapBackend : Backend</ID>
    <ID>TooManyFunctions:K9.kt$K9 : EarlyInit</ID>
    <ID>TooManyFunctions:K9BackendFolder.kt$K9BackendFolder : BackendFolder</ID>
    <ID>TooManyFunctions:K9CoreResourceProvider.kt$K9CoreResourceProvider : CoreResourceProvider</ID>
    <ID>TooManyFunctions:K9Drawer.kt$K9Drawer : KoinComponent</ID>
    <ID>TooManyFunctions:K9MessageStore.kt$K9MessageStore : MessageStore</ID>
    <ID>TooManyFunctions:K9NotificationActionCreator.kt$K9NotificationActionCreator : NotificationActionCreator</ID>
    <ID>TooManyFunctions:K9NotificationResourceProvider.kt$K9NotificationResourceProvider : NotificationResourceProvider</ID>
    <ID>TooManyFunctions:ListenableMessageStore.kt$ListenableMessageStore : MessageStore</ID>
    <ID>TooManyFunctions:Logger.kt$Logger</ID>
    <ID>TooManyFunctions:ManageFoldersFragment.kt$ManageFoldersFragment : Fragment</ID>
    <ID>TooManyFunctions:MessageContainerView.kt$MessageContainerView : LinearLayoutOnCreateContextMenuListenerKoinComponent</ID>
    <ID>TooManyFunctions:MessageDetailsFragment.kt$MessageDetailsFragment : ToolbarBottomSheetDialogFragment</ID>
    <ID>TooManyFunctions:MessageIdParser.kt$MessageIdParser</ID>
    <ID>TooManyFunctions:MessageList.kt$MessageList : K9ActivityMessageListFragmentListenerMessageViewFragmentListenerMessageViewContainerListenerOnBackStackChangedListenerOnSwitchCompleteListenerPermissionUiHelper</ID>
    <ID>TooManyFunctions:MessageList.kt$MessageList$Companion : KoinComponent</ID>
    <ID>TooManyFunctions:MessageListAdapter.kt$MessageListAdapter : Adapter</ID>
    <ID>TooManyFunctions:MessageListCache.kt$MessageListCache</ID>
    <ID>TooManyFunctions:MessageListFragment.kt$MessageListFragment : FragmentConfirmationDialogFragmentListenerMessageListItemActionListener</ID>
    <ID>TooManyFunctions:MessageListFragment.kt$MessageListFragment$MessageListActivityListener : SimpleMessagingListener</ID>
    <ID>TooManyFunctions:MessageListRemoteViewFactory.kt$MessageListRemoteViewFactory : RemoteViewsFactoryKoinComponent</ID>
    <ID>TooManyFunctions:MessageListSwipeCallback.kt$MessageListSwipeCallback : Callback</ID>
    <ID>TooManyFunctions:MessageStore.kt$MessageStore</ID>
    <ID>TooManyFunctions:MessageTopView.kt$MessageTopView : LinearLayoutKoinComponent</ID>
    <ID>TooManyFunctions:MessageViewContainerFragment.kt$MessageViewContainerFragment : Fragment</ID>
    <ID>TooManyFunctions:MessageViewFragment.kt$MessageViewFragment : FragmentConfirmationDialogFragmentListenerAttachmentViewCallback</ID>
    <ID>TooManyFunctions:MigrationTo73.kt$MigrationTo73</ID>
    <ID>TooManyFunctions:MimeExtensions.kt$com.fsck.k9.mail.internet.MimeExtensions.kt</ID>
    <ID>TooManyFunctions:MimeHeader.kt$MimeHeader</ID>
    <ID>TooManyFunctions:MimeHeaderChecker.kt$UnstructuredHeaderChecker</ID>
    <ID>TooManyFunctions:MimeHeaderParser.kt$MimeHeaderParser</ID>
    <ID>TooManyFunctions:MimeParameterDecoder.kt$MimeParameterDecoder</ID>
    <ID>TooManyFunctions:MimeParameterEncoder.kt$MimeParameterEncoder</ID>
    <ID>TooManyFunctions:NoOpLogger.kt$NoOpLogger : Logger</ID>
    <ID>TooManyFunctions:NotificationActionCreator.kt$NotificationActionCreator</ID>
    <ID>TooManyFunctions:NotificationChannelManager.kt$NotificationChannelManager</ID>
    <ID>TooManyFunctions:NotificationController.kt$NotificationController</ID>
    <ID>TooManyFunctions:NotificationResourceProvider.kt$NotificationResourceProvider</ID>
    <ID>TooManyFunctions:NotifierMessageStore.kt$NotifierMessageStore : MessageStore</ID>
    <ID>TooManyFunctions:Pop3Backend.kt$Pop3Backend : Backend</ID>
    <ID>TooManyFunctions:Preferences.kt$Preferences : AccountManager</ID>
    <ID>TooManyFunctions:PushController.kt$PushController</ID>
    <ID>TooManyFunctions:RealGeneralSettingsManager.kt$RealGeneralSettingsManager : GeneralSettingsManager</ID>
    <ID>TooManyFunctions:RealImapConnection.kt$RealImapConnection : ImapConnection</ID>
    <ID>TooManyFunctions:RealImapFolder.kt$RealImapFolder : ImapFolder</ID>
    <ID>TooManyFunctions:RealImapStore.kt$RealImapStore : ImapStoreImapConnectionManagerInternalImapStore</ID>
    <ID>TooManyFunctions:RecipientMvpView.kt$RecipientMvpView : OnFocusChangeListenerOnClickListener</ID>
    <ID>TooManyFunctions:RecipientPresenter.kt$RecipientPresenter</ID>
    <ID>TooManyFunctions:ReplyToView.kt$ReplyToView</ID>
    <ID>TooManyFunctions:RetrieveFolderOperations.kt$RetrieveFolderOperations</ID>
    <ID>TooManyFunctions:SaveMessageOperations.kt$SaveMessageOperations</ID>
    <ID>TooManyFunctions:SettingsExportViewModel.kt$SettingsExportViewModel : ViewModel</ID>
    <ID>TooManyFunctions:SettingsExporter.kt$SettingsExporter</ID>
    <ID>TooManyFunctions:SettingsImportFragment.kt$SettingsImportFragment : Fragment</ID>
    <ID>TooManyFunctions:SettingsImportUiModel.kt$SettingsImportUiModel</ID>
    <ID>TooManyFunctions:SettingsImportViewModel.kt$SettingsImportViewModel : ViewModel</ID>
    <ID>TooManyFunctions:SettingsListFragment.kt$SettingsListFragment : FragmentItemTouchCallback</ID>
    <ID>TooManyFunctions:SimpleHighlightView.kt$SimpleHighlightView : FrameLayout</ID>
    <ID>TooManyFunctions:SimpleSyncListener.kt$SimpleSyncListener : SyncListener</ID>
    <ID>TooManyFunctions:SingleMessageNotificationCreator.kt$SingleMessageNotificationCreator</ID>
    <ID>TooManyFunctions:SmtpResponseParser.kt$SmtpResponseParser</ID>
    <ID>TooManyFunctions:SmtpTransport.kt$SmtpTransport</ID>
    <ID>TooManyFunctions:SummaryNotificationCreator.kt$SummaryNotificationCreator</ID>
    <ID>TooManyFunctions:SyncListener.kt$SyncListener</ID>
    <ID>TooManyFunctions:SystemOutLogger.kt$SystemOutLogger : Logger</ID>
    <ID>TooManyFunctions:ThreadMessageOperations.kt$ThreadMessageOperations</ID>
    <ID>TooManyFunctions:Timber.kt$Timber</ID>
    <ID>TooManyFunctions:TimberLogger.kt$TimberLogger : Logger</ID>
    <ID>TooManyFunctions:ToolbarBottomSheetDialog.kt$ToolbarBottomSheetDialog : AppCompatDialog</ID>
    <ID>TooManyFunctions:UnreadWidgetConfigurationFragment.kt$UnreadWidgetConfigurationFragment : PreferenceFragmentCompat</ID>
    <ID>TooManyFunctions:UpdateFolderOperations.kt$UpdateFolderOperations</ID>
    <ID>TooManyFunctions:VibrationDialogFragment.kt$VibrationDialogFragment$VibrationPatternAdapter : BaseAdapter</ID>
    <ID>TooManyFunctions:WebDavBackend.kt$WebDavBackend : Backend</ID>
    <ID>UnnecessaryAbstractClass:AppRobolectricTest.kt$AppRobolectricTest$AppRobolectricTest</ID>
    <ID>UnnecessaryAbstractClass:HtmlModification.kt$HtmlModification$HtmlModification</ID>
    <ID>UnnecessaryAbstractClass:K9RobolectricTest.kt$K9RobolectricTest$K9RobolectricTest</ID>
    <ID>UnnecessaryAbstractClass:RobolectricTest.kt$RobolectricTest$RobolectricTest</ID>
    <ID>UnusedPrivateMember:Contacts.kt$Contacts$addresses: Array&lt;Address?&gt;?</ID>
    <ID>UnusedPrivateMember:ExtraAccountDiscovery.kt$ExtraAccountDiscovery$email: String</ID>
    <ID>UnusedPrivateMember:HttpUriParser.kt$HttpUriParser$i</ID>
    <ID>UnusedPrivateMember:MessageListLoader.kt$MessageListLoader$account: Account</ID>
    <ID>UnusedPrivateMember:MessageViewFragment.kt$MessageViewFragment$requestKey: String</ID>
    <ID>UnusedPrivateMember:NewSetupUiHack.kt$NewSetupUiHack$builder: SettingsListBuilder</ID>
    <ID>UseCheckOrError:OutboxStateRepository.kt$OutboxStateRepository$throw IllegalStateException("No outbox_state entry for message with id $messageId")</ID>
    <ID>UseCheckOrError:ThemeExtensions.kt$throw IllegalStateException("Couldn't resolve attribute ($attrId)")</ID>
    <ID>UseRequire:MimeParameterEncoder.kt$MimeParameterEncoder$throw IllegalArgumentException("Unsupported character: $c")</ID>
    <ID>VariableNaming:AutocryptGossipHeaderParserTest.kt$AutocryptGossipHeaderParserTest$// Example from Autocrypt 1.0 appendix val GOSSIP_PART = """ |Autocrypt-Gossip: $GOSSIP_HEADER_BOB |Autocrypt-Gossip: addr=carol@autocrypt.example; keydata= | mQGNBFoBt8oBDADGqfZ6PqW05hUEO1dkKm+ixJXnbVriPz2tRkAqT7lTF4KBGitxo4IPv9RPIjJR | UMUo89ddyqQfiwKxdFCMDqFDnVRWlDaM+r8sauNJoIFwtTFuvUpkFeCI5gYvneEIIbf1r3Xx1pf5 | Iy9qsd5eg/4Vvc2AezUv+A6p2DUNHgFMX2FfDus+EPO0wgeWbNaV601aE7UhyugB |Content-Type: text/plain | |Hi Bob and Carol, | |I wanted to introduce the two of you to each other. | |I hope you are both doing well! You can now both "reply all" here, |and the thread will remain encrypted. | |Regards, |Alice """.trimMargin().crlf()</ID>
    <ID>VariableNaming:AutocryptGossipHeaderParserTest.kt$AutocryptGossipHeaderParserTest$val GOSSIP_DATA_BOB = Base64.decodeBase64( """ mQGNBFoBt74BDAC8AMsjPY17kxodbfmHah38ZQipY0yfuo97WUBs2jeiFYlQdunPANi5VMgbAX+H Mq1XoBRs6qW+WpX8Uj11mu22c57BTUXJRbRr4TnTuuOQmT0egwFDe3x8vHSFmcf9OzG8iKR9ftUE +F2ewrzzmm3XY8hy7QeUgBfClZVA6A3rsX4gGawjDo6ZRBbYwckINgGX/vQk6rGs """.trimIndent().toByteArray(), )</ID>
    <ID>VariableNaming:AutocryptGossipHeaderParserTest.kt$AutocryptGossipHeaderParserTest$val GOSSIP_HEADER_BOB = """ |addr=bob@autocrypt.example; keydata= | mQGNBFoBt74BDAC8AMsjPY17kxodbfmHah38ZQipY0yfuo97WUBs2jeiFYlQdunPANi5VMgbAX+H | Mq1XoBRs6qW+WpX8Uj11mu22c57BTUXJRbRr4TnTuuOQmT0egwFDe3x8vHSFmcf9OzG8iKR9ftUE | +F2ewrzzmm3XY8hy7QeUgBfClZVA6A3rsX4gGawjDo6ZRBbYwckINgGX/vQk6rGs """.trimMargin()</ID>
    <ID>VariableNaming:AutocryptGossipHeaderParserTest.kt$AutocryptGossipHeaderParserTest$val GOSSIP_RAW_HEADER_BOB = "Autocrypt-Gossip: $GOSSIP_HEADER_BOB".crlf()</ID>
  </CurrentIssues>
</SmellBaseline>
